* AWS SSO
To log in to AWS SSO:

#+begin_src shell :results output
aws sso login --profile wisp-tech-root
#+end_src

* Testing the Typeform Webhook endpoint locally
To send a JSON file to the Typeform Webhook endpoint locally:

#+begin_src shell :results output
curl -X POST -H "Content-Type: application/json" -d @"typeform_oms_pyridium.json" http://localhost:5000/webhook/typeform
#+end_src

* To update local Strapi database:
1. Log in to AWS SSO
2. aws s3 cp --profile wisp-tech-dev s3://wisp-strapi-data-import-export/latest.sql .
3. dropdb local_strapi
4. createdb local_strapi
5. psql -d local_strapi < latest.sql


* Possible sources for order2.context -> 'source'
admin
checkout
jotform
reactivation
refill_now
renewal
script
typeform
* Inbox

* Run workers locally

#+begin_src shell
python -u manage.py run_worker
#+end_src

* Update a user's permissions

#+BEGIN_SRC shell
python manage.py update_user_permissions --user_ids <user_ids> --permissions <permissions>
#+END_SRC

* Update .envrc.development.encrypted

#+BEGIN_SRC shell
ssh-vault -k ~/.ssh/devs_hellowisp edit .envrc.development.encrypted
#+END_SRC

Hint: cat .envrc =)

* Secrets files
** Edit secrets files in SWA

#+BEGIN_SRC shell
aws sso login --profile wisp-tech-root
AWS_PROFILE=wisp-tech-devops sops ./charts/swa/secrets/<env>.yaml
#+END_SRC

** Issue with MAC address
If when trying to edit the secrets files, you get an error like this:

#+BEGIN_SRC shell
MAC mismatch. File has 33CB2D37F6896A5E8F0B92A2F7E405BB6F014D5C8554F961F549DB2B86F6A0F1E7EB011FF96386B2548E77E2B46EDC7E525E3BEC4C4B8589C34782970448B65E, computed E80EF82920F0BC38B8743ED468332A232569BF33B536301606272AF18AA287FC3D6FA538A2EF280B32DD61F590269C6C07AF5B0FB1998BDDDBB6E2D93C985628
#+END_SRC

It means that what's in your version of that file does not match the encrypted value at the bottom. This value is updated when you edit the file, and a mismatch there will cause this error.

This tends to occur when you're trying to delete something out of that file, or if you rebase your branch and take the other branch's encrypt value.

* Cron Jobs
:PROPERTIES:
:ID:       8f282901-be25-4ec3-832a-b6d59517ad93
:END:
All our cron jobs exist in [[https://github.com/hellowisp/secure.hellowisp.com/blob/dbb7325c965c100d22da94818baf22696cf3004b/charts/swa/values/prod.yaml#L86][charts/swa/values/prod.yaml]]

They show up in DataDog [[https://app.datadoghq.com/dash/integration/30464/kubernetes-jobs-and-cronjobs-overview?fullscreen_end_ts=1706794751129&fullscreen_paused=false&fullscreen_refresh_mode=sliding&fullscreen_section=overview&fullscreen_start_ts=1706189951129&fullscreen_widget=7620774346478920&refresh_mode=sliding&tpl_var_kube_cluster_name%5B0%5D=wisp-prod-use1-eks&tpl_var_kube_cronjob%5B0%5D=invite-people-to-trustpilot-review&view=spans&from_ts=1706189975421&to_ts=1706794775421&live=true][here]].

* Access Prod DB locally (read only)
https://www.notion.so/wispinc/Connect-to-Prod-Database-in-AWS-9e36d57c8b2e4f7fb1b75bad26b5816f

#+BEGIN_SRC shell
# Only needs run once per 12 hours
aws sso login --profile wisp-tech-root

aws ssm start-session --profile wisp-tech-prod \
    --region us-east-1 \
    --target i-0858f4eb6ea8f418f \
    --document-name AWS-StartPortForwardingSessionToRemoteHost \
    --parameters host="wisp-prod-use1-secure-web-app.c3nyfd391zvt.us-east-1.rds.amazonaws.com",portNumber="5432",localPortNumber="54329"
#+END_SRC

* Log into prod DB for write access

- login to aws through console with aws sso login --profile wisp-tech-root
- set prod context with kubectl config use-context prod
- Lookup available prod pods with ~kubectl get pods -n swa~
- Pick a web pod (named prod-swa-web-x-y
- exec into it with kubectl exec -ti <webpod_name> bash -n swa
- Once you're in bash you can just run ./manage shell like normal and now you're in a full production shell

So with the current pods up right now all you need to run is
- aws sso login --profile wisp-tech-root
- kubectl config use-context prod
- kubectl exec -ti prod-swa-web-756bb547d7-4vfrh bash -n swa
- ./manage shell

* Stripe API key expired when running in CLI

If the Stripe CLI API key is expired, use the command ~stripe login~ to get it refreshed.
