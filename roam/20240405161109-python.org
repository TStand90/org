:PROPERTIES:
:ID:       3a948b50-dedc-4fdf-a86c-05c1c3a9f230
:END:
#+title: Python

Python is the second best language for just about everything (except game development, it sucks at that).

* Concepts
** Abstract classes
You can make a class abstract by adding ~abc.ABC~ as a superclass.

#+BEGIN_SRC python
import abc

class MyAbstractClass(abc.ABC):
    @abc.abstractmethod
    def do_something(self):
        raise NotImplementedError("Implement the thing please!")
#+END_SRC

*NOTE*: You _must_ add /at least one/ abstract method to a class for it to be truly abstract. Otherwise, the class can still be instatiated!
** Dataclasses
:PROPERTIES:
:ID:       0ea785b4-8093-44ae-b09a-3df2c100b656
:END:

Dataclasses in Python are a nice way to create classes without the need for the ~__init__~ method.

*** field
**** compare
If True, will be used to compare two dataclasses (True by default).

You can specify ~compare=False~ to say "this field should /not/ be used in equality checks."

#+BEGIN_SRC python
from dataclasses import dataclass, field

@dataclass
class Card:
    summary: str = None
    owner: str = None
    state: str = "todo"
    id: int = field(default=None, compare=False)

card_1 = Card(id=1)
card_2 = Card(id=2)

assert card_1 == card_2  # Will be True
#+END_SRC
**** default_factory



** Testing
*** ~unittest.mock~
**** Assert called
***** assert_any_call
Used to say "assert that this function was called at some point, with these arguments". Useful if wanting to test a function that was called multiple times.
#+BEGIN_SRC python
mock_get_patient_dosespot_id.assert_any_call(
        patient_id=from_patient_id, provider_id=provider_id
)
mock_get_patient_dosespot_id.assert_any_call(
        patient_id=to_patient_id, provider_id=provider_id
)
#+END_SRC
**** Mock a function with arguments
By assigning ~side_effect~ of a ~MagicMock~ to a function, you can return different values from a mock based on the inputs. This is useful when mocking a function that is used multiple times in a test, but needs to return different values.

#+BEGIN_SRC python
@mock.patch.object(SomeObject, "some_method")
def test_something(
    mock_some_method: mock.MagicMock,
):
    """An example of mocking a method and returning different values depending on the inputs."""
    mocked_api_client = mock.Mock(spec=DoseSpotApiClientV1)
    erx_integration = DoseSpotIntegrationV1(api_client=mocked_api_client)

    some_input_value_1 = 123
    some_ouput_value_1 = 234
    some_input_value_2 = 456
    some_ouput_value_2 = 567

    def mock_function_with_different_returns(some_input: int) -> int:
        """Helper function to simulate different return values based on inputs."""
        if some_input == some_input_value_1:
            return some_ouput_value_1
        else:
            return some_ouput_value_2

    mock_some_method.side_effect = mock_function_with_different_returns
    #+END_SRC
* Libraries
** [[id:f534f219-0946-4dfe-809f-b36a984202a2][pytest]]
