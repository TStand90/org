:PROPERTIES:
:ID:       bb077623-5540-4767-b6d9-ae4301af5ef2
:END:
#+title: React

React is a [[id:ccd90ef7-390c-4623-9a21-49340850109b][Javascript]] framework that evangelists insist is a library. It is divine punishment for straying from the holy path of [[id:e32c438b-71d7-4647-9132-62d852feee48][jQuery]].

React emphasizes a [[id:cb54393a-8404-4632-bef5-ecd6b4897150][declarative]] style of programming.

React uses the [[id:7c44002d-fa4f-48cf-a98a-10accc14f54b][Virtual DOM]] to make updates.

React uses [[id:a91b6fb3-4209-45d0-80d1-6fa59b70a746][JSX]] to create [[id:b785b344-47c9-4993-96a6-6a267af835b1][HTML]].

* Advantages
** Simplicity
[[id:a91b6fb3-4209-45d0-80d1-6fa59b70a746][JSX]] and React itself are simple (at least when getting started).
** Testability
The [[id:7c44002d-fa4f-48cf-a98a-10accc14f54b][Virtual DOM]] allows testing to occur without needing to run a headless browser.
** Ecosystem
Pretty much everybody uses React these days. There are libraries for everything, and everyone has touched React at least once in their career.
* Disadvantages
** Not a complete solution
You will certainly need to reach for other libraries to do anything that isn't arbitraty
** Constant library maintenance
[[id:ccd90ef7-390c-4623-9a21-49340850109b][Javascript]] has a messy ecosystem. Things constantly break, and libraries are replaced.
** One way binding
React only supports one way binding, unlike other web frameworks with two way binding.

* Functional Components
:PROPERTIES:
:ID:       6b73a030-c9ac-4ad0-9685-2982871e94a1
:END:

Functional components are how all the cool kids are doing [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] these days.

** Arguments to the function
Functional Components can only receive *one* argument: a frozen object of properties.

** Destructuring properties
It is common practice to write functional components with a destructured first argument. This ensures that the function does not have a ton of arguments as its scope grows.

#+BEGIN_SRC javascript
...
function MenuItem({ href, label }) {
  return (
    <li className="menu-item">
      <a className="menu-link" href={href}>
        {label}
      </a>
    </li>
  );
}
...
#+END_SRC

A benefit of this approach is that you can specify default arguments.

#+BEGIN_SRC javascript
...
function Menu() {
  return (
    <nav className="navbar">
      <h1 className="title">TheMenuCompany</h1>
      <ul className="menu">
        <MenuItem label="Home" href="/" />
        <MenuItem label="About" href="/about/" />
        <MenuItem
          label="Blog" href="/blog" target="_blank"
        />
      </ul>
    </nav>
  );
}
function MenuItem({ label, href, target = "_self" }) {
  return (
    <li className="menu-item">
      <a
        className="menu-link"
        href={href}
        target={target}
      >
        {label}
      </a>
    </li>
  );
}
...

#+END_SRC

The ordering of the properties does not matter, but it's common practice to put those with defaults at the end.

** Pass through properties
Sometimes, an argument to a functional component is needed by its children, but not the component itself. The [[id:c66f10cf-8136-430a-8b7c-17b259490cc2][rest operator]] can come in handy here.

#+BEGIN_SRC javascript
function MyComponent({ a, b, ...rest }) {
 // a = 1, b = 2, rest = { c: 3 }
}
// Later:
<MyComponent a="1" b="2" c="3" />
#+END_SRC

It's convention to list out the required properties in the function signature, and leave the unneeded ones as a [[id:c66f10cf-8136-430a-8b7c-17b259490cc2][rest operator]].

#+BEGIN_SRC javascript
...
function MenuItem({ label, href, ...rest }) {
  return (
    <li className="menu-item">
      <a className="menu-link" href={href} {...rest}>
        {label}
      </a>
    </li>
  );
}
...
#+END_SRC

** Argument ordering
The most common way to order arguments in a functional component is:
1. Properties without defaults
2. Properties with defaults
3. Rest


** Lack of constructors
Class based [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] components have constructors, which run only when the component is created. [[id:6b73a030-c9ac-4ad0-9685-2982871e94a1][Functional Components]] do not. The function itself re-runs in its entirety on each re-render.

To replicate the effects of a constructor (something that only runs once upon creation), use [[id:89258539-a6ec-41ef-b4c3-ab696277ac30][useMemo]].

Here's an example where an image component generates a random ID, but only once.

#+BEGIN_SRC javascript
import { useMemo } from 'react';
...
function Image({ index, title }) {
  const id = useMemo(() =>
    `image-${Math.floor(Math.random() * 1000000)}`,
  []);
  return (
    <figure style={{ margin: "5px" }} id={id}>
      <img src={`//picsum.photos/id/${index}/150/150/`} alt={title} />
      <figcaption>
        <h3>Species: {title}</h3>
      </figcaption>
    </figure>
  );
}
...
#+END_SRC

** Re-rendering
A functional component will re-render in one of the following scenarios:
- The component just mounted.
- The parent component re-rendered.
- The component uses stateful hooks, which have updated.

* Stateless components vs. stateful
Components that depend only on their properties and have no internal logic beyond that are called *stateless componenets*. The opposite is *stateful components*, which do have some internal state.

While almost all [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] *applications* are stateful, not all *components* are stateful.

- Stateful components are independent of their contexts, and have the ability to update theirselves based on internal triggers.
- Stateless components can only change or update when their parent component provides new properties.

** Where does state go?
Generally, state should go as close to the component that actually needs it.

** What kinds of information goes in component state?
*** Application data
Data that the user is working on, updating, or reading. Example: information about a logged in user. Often stored globally, or in a data store.
*** UI state
The current state of UI components. Should generally be kept local.
*** Form data
Usually kept in component state.

** What not to store in state?
*** Values that don't change
*** Copies of other state values
*** Duplicates of the same data

* Hooks
:PROPERTIES:
:ID:       30b7d3af-03c7-4534-8386-4e0b9009f8dd
:END:

"Hook" is an umbrella term for a special kind of function in [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] 16.8 and above. There are many built in hooks, and it's possible to create custom hooks as well (should start with =use*=).

Hooks don't all do the same kinds of things. Hooks are hooks because [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] says they are.

They're called hooks because they are hooks *from* your component *to* the "insides" of [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]]. They allow doing things that aren't normally possible.

Hooks *must* always run in a component's render. That is, you cannot conditionally run a hook in an ~if~ statement or something similar.

** useState
:PROPERTIES:
:ID:       072acfe3-f6b5-4f03-9675-5a56f2320415
:END:

~useState~ is a hook that allows for state manipulation.

To use it, provide an initial value, as well as a variable and setter function. In the below example, ~counter~ holds the value (initially ~0~), and ~setCounter~ is the setter function that will update that value.

#+BEGIN_SRC javascript
import { useState } from "react";
function Counter() {
  const [counter, setCounter] = useState(0);
  return (
    <main>
      <p>Clicks: {counter}</p>
      <button
        onClick={() => setCounter((value) => value + 1)}
      >
        Increment
      </button>
    </main>
  );
}
function App() {
  return <Counter />;
}
export default App;
#+END_SRC

It's common practice to name the state itself after what's stored in it (~counter~ here), and name the setter as =set*= (so ~setCounter~). This isn't mandatory, but most [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] developers will do this.

~useState~ must be called with an initial value. Otherwise, the initial value is assumed to be [[id:ef839e85-abd9-45fd-867c-4933be461e39][undefined]]. This is used to set up a baseline value for the component. It will only be used on the initial render.

It's possible to give an initial value from the componenet's props as well.

#+BEGIN_SRC javascript
import { useState } from "react";
function Counter({ start }) {
  const [counter, setCounter] = useState(start);
  return (
    <main>
      <p>Counter: {counter}</p>
      <button onClick={() => setCounter(value => value + 1)}>
        Increment
      </button>
    </main>
  );
}
function App() {
  return (
    <>
      <Counter start={0} />
      <Counter start={123} />
      <Counter start={-64} />
    </>
  );
}
export default App;
#+END_SRC

Sometimes, the initial value must be computed. Here is an example of calling a function for the initial value:

#+BEGIN_SRC javascript
const [password, setPassword] = useState(() => generatePassword());
#+END_SRC

And here's an example of an initializer function that takes an argument.

#+BEGIN_SRC javascript
const [password, setPassword] = useState(() => generatePassword(12));
#+END_SRC

What if the state *is* a function? For example, if we have a "calculator" that needs to set the state to a function.

#+BEGIN_SRC javascript
const OPERATORS = {
 ADDITION: (a, b) => a + b,
 SUBTRACTION: (a, b) => a - b,
 PRODUCT: (a, b) => a * b,
};

function Calculator() {
 const [operator, setOperator] = useState(() => OPERATORS.ADDITION);
 ...
}
#+END_SRC

Note that the component won't re-render unless the state value actually changes. So if you use the setter function and set the value to what it currently is, [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] will not re-render the component.

This has important implications for things like arrays and objects, because changing those doesn't cause a re-render. Because the *reference* is the same, the internal values aren't checked.

For arrays, you can copy the array and set that new array to the state value. So when deleting something from an array, create a copy without the thing you want to delete. When adding to an array, create a copy with the new item, and set that to the state.

** useMemo
:PROPERTIES:
:ID:       89258539-a6ec-41ef-b4c3-ab696277ac30
:END:

TODO

** useEffect
:PROPERTIES:
:ID:       4151f221-bf11-4e97-901e-33eb8a547cc0
:END:

[[id:4151f221-bf11-4e97-901e-33eb8a547cc0][useEffect]] is triggered when any value in a set of dependencies change.

[[id:4151f221-bf11-4e97-901e-33eb8a547cc0][useEffect]] also allows defining a "cleanup" function that can run in one of two cases:
- Before the effect is triggered again
- If the component unmounts.

Here are some likely scenarios to use [[id:4151f221-bf11-4e97-901e-33eb8a547cc0][useEffect]]:
- Loading external data in a component. Will want to do this when the component mounts.
- Creating a timer with an interval.
- Track when a dialog is closed. Can run an effect when the component unmounts.
- Update the browser window title with the page currently displayed.
- Run a timer, but only when an ~isActive~ flag is true.

** useReducer
:PROPERTIES:
:ID:       a5007b76-578d-4d98-b890-2661828a5f4d
:ROAM_REFS: https://livebook.manning.com/book/react-quickly-second-edition/chapter-10/143
:END:

[[id:a5007b76-578d-4d98-b890-2661828a5f4d][useReducer]] is a stateful hook which serves as an advanced version of [[id:072acfe3-f6b5-4f03-9675-5a56f2320415][useState]]. It's a good way to generate a new state solely based on the current state and some action that takes a payload.

The term "reducer" comes from [[id:762f448a-5ae7-4743-9c16-aa0b312404fb][MapReduce]]. Reducers are generally pure, simple, and side-effect-free functions that are deterministic and defines solely by their parameters.

[[id:a5007b76-578d-4d98-b890-2661828a5f4d][useReducer]] is never strictly necessary - anything possible with it can be done with a combination of [[id:072acfe3-f6b5-4f03-9675-5a56f2320415][useState]]s.

#+BEGIN_SRC javascript
const [state, dispatch] = useReducer(reducer, initialState);
#+END_SRC

~state~ and ~initialState~ work just like they do in [[id:072acfe3-f6b5-4f03-9675-5a56f2320415][useState]]. The new things are the ~dispatch~ function and the ~reducer~ function.

*** dispatch
~dispatch~ works as an enhanced setter function, which allows us to not set the value directly, but rather instruct the reducer function on how to set the value. ~dispatch~ is invoked with an *action* object, which is then passed to the reducer along with the old state.

*** reducer
~reducer~ is a function that takes the current state and a dispatched action and returns a new state based on them. The ~reducer~ is expected to return the new state.

#+BEGIN_SRC javascript
function reducer(state, { type, payload }) {
  switch (type) {
    case "TYPE_A":
      // return new state based on TYPE_A
    case "TYPE_B":
      // return new state based on TYPE_B
  }
}
#+END_SRC

*** Interdependent state
Imagine a scenario where we are loading data from an external source. We have three states: =Loading=, =Loading Succeeded=, and =Loading Failed=. We also would have something to hold the loaded data, and an error message if the loading failed. It would not make sense for the error or result to be anything but ~null~ if the state is =LOADING=, and if the state is =FAILED=, then the result would not have a value.

This is a good case for [[id:a5007b76-578d-4d98-b890-2661828a5f4d][useReducer]]. We can define thet states as =INITIALIZE=, =LOADING=, =FAILURE=, and =SUCCESS=.

#+BEGIN_SRC javascript
function reducer(state, { type, payload }) {
  switch (type) {
    case "INITIALIZE":
      return {
        status: "INITIALIZE",
        result: null,
        error: null,
      };
    case "LOADING":
      return {
        ...state,
        status: "LOADING",
      };
    case "FAILURE":
      return {
        ...state,
        status: "FAILURE",
        error: payload,
      };
    case "SUCCESS":
      return {
        ...state,
        status: "SUCCESS",
        result: payload,
      };
  }
}
#+END_SRC

*** Examples

#+BEGIN_SRC javascript
import { useReducer } from "react";

function reducer(state, { type }) {
  switch (type) {
    case "INCREMENT":
      return state + 1;
    case "DECREMENT":
      return state - 1;
    default:
      return state;
  }
}

function Counter() {
  const [counter, dispatch] = useReducer(reducer, 0);

  return (
    <section>
      <h1>Counter: {counter}</h1>
      <div>
        <button onClick={
          () => dispatch({ type: "INCREMENT" })
        }>
          Increment
        </button>
        <button onClick={
          () => dispatch({ type: "DECREMENT" })
        }>
          Decrement
        </button>
      </div>
    </section>
  )
}

function App() {
  return <Counter />;
}

export default App;
#+END_SRC

** useRef
:PROPERTIES:
:ID:       9ca29879-3648-4bf0-8338-7ec862662aa7
:END:

[[id:9ca29879-3648-4bf0-8338-7ec862662aa7][useRef]] is a hook with _passive state_, which means that it contains state, but setting or updating it does not re-render the component.

It can be useful for storing references to [[id:d99e159b-96af-4464-831b-b812e5621144][DOM]] elements (hence the name) and remembering values between renders.

To read or update the value of a [[id:9ca29879-3648-4bf0-8338-7ec862662aa7][useRef]] hook, access the ~.current~ property on the hook return value.

*** Example: Click counter
We want to increment a counter only when the user double-clicks a button. We need to store the timestamp of when the user last clicked the button. Another click close enough to that timestamp will count as a double-click.

We could store the last click time using [[id:072acfe3-f6b5-4f03-9675-5a56f2320415][useState]], but that would cause the component to re-render for each click. That's inefficent, so we can instead use [[id:9ca29879-3648-4bf0-8338-7ec862662aa7][useRef]] to store the click time. This will ensure we don't re-render the component unnecessarily.

#+BEGIN_SRC javascript
import { useState, useRef } from "react";
const THRESHOLD = 300;
function DoubleClickCounter() {
  const [counter, setCounter] = useState(0);
  const lastClickTime = useRef(null);
  const onClick = () => {
    const isDoubleClick =
      Date.now() - lastClickTime.current < THRESHOLD;
    if (isDoubleClick) {
      setCounter((value) => value + 1);
    } else {
      lastClickTime.current = Date.now();
    }
  };
  return (
    <main>
      <p>Counter: {counter}</p>
      <button onClick={onClick}>Increment</button>
    </main>
  );
}
function App() {
  return <DoubleClickCounter />;
}
export default App;
#+END_SRC

*** Example: Reference to a [[id:d99e159b-96af-4464-831b-b812e5621144][DOM]] element
#+BEGIN_SRC javascript
function AutoFocusInput() {
  const ref = useRef();
  useEffect(() => ref.current.focus(), []);
  return <input ref={ref} />;
}
#+END_SRC

** useContext
:PROPERTIES:
:ID:       7a4d6456-508c-43c9-a857-4dd958d49b0c
:END:

[[id:7a4d6456-508c-43c9-a857-4dd958d49b0c][useContext]] is a stateful hook, which works in a store in a parent component somewhere up the component tree.

Use ~createContext~ to create the context value, and use this hook to use the value.

The [[id:7a4d6456-508c-43c9-a857-4dd958d49b0c][useContext]] hook is stateful. So if the context value changes, the component will re-render.

** useCallback
:PROPERTIES:
:ID:       94f60755-6b1c-4ed1-937d-35128d29715a
:END:

[[id:94f60755-6b1c-4ed1-937d-35128d29715a][useCallback]] is a specialized version of [[id:89258539-a6ec-41ef-b4c3-ab696277ac30][useMemo]], which is useful when [[id:89258539-a6ec-41ef-b4c3-ab696277ac30][useMemo]] is used to memoize a function.

TODO: More info and examples here.

** Custom Hooks
:PROPERTIES:
:ID:       79a8478e-e1db-41fc-afe0-748cec9af872
:END:
To create a custom hook, all you have to do is define a function that calls a [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] hook.

#+BEGIN_SRC javascript
function useName() {
  return useContext(NameContext);
}
#+END_SRC

That's it. Note that the naming convention is to start the function with ~use*~.

[[id:79a8478e-e1db-41fc-afe0-748cec9af872][Custom Hooks]] have to obey the same rules as hooks. You can't use them outside functional components, and you can only use [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] hooks if you always use the same hooks in the same order.

*** Examples

Example: A ~useToggle~ function to toggle boolean values.

#+BEGIN_SRC javascript
function useToggle(default = false) {
  const [value, setter] = useState(Boolean(default));
  const toggle = () => setter(v => !v);
  return [value, toggle];
}
#+END_SRC

It's common to return an array of the value and the function, the same way [[id:072acfe3-f6b5-4f03-9675-5a56f2320415][useState]] does.

* Events
:PROPERTIES:
:ID:       34620dda-292e-42ce-8f93-4dbf43ef01fc
:END:
If you define a property on a [[id:a91b6fb3-4209-45d0-80d1-6fa59b70a746][JSX]] element that references an [[id:b785b344-47c9-4993-96a6-6a267af835b1][HTML]] node, and that property matches a known event from [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]]'s list of supported events, [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] will treat the property as an event listener rather than a [[id:d99e159b-96af-4464-831b-b812e5621144][DOM]] attribute. [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] will correctly add and remove the event listener as the component mounts and unmounts.

Listening to events in React is about three things:
- Knowing what event to listen for
- Knowing which element to listen on
- Assiging a listening function on the correct property on the correct element

Events in [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] "bubble" up. So a "focus" event will fire on a specific input field when it gets the focus, and the parent components can also define some behaviour for that focus events as well (example: highlight a section of a form when an input has focus).

** Events supported directly in [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]]
:PROPERTIES:
:ID:       23e9aee1-c9e1-41e8-8b97-55bd87a96fb3
:END:
| Event type         | Events                                                                |
|--------------------+-----------------------------------------------------------------------|
| Clipboard events   | onCopy onCut onPaste                                                  |
| Composition events | onCompositionEnd onCompositionStart onCompositionUpdate               |
| Keyboard events    | onKeyDown onKeyPress onKeyUp                                          |
| Focus events       | onFocus onBlur                                                        |
| Form events        | onChange onInput onInvalid onReset onSubmit                           |
| Generic events     | onError onLoad                                                        |
| Mouse events       | onClick onContextMenu onDoubleClick onDrag onDragEnd                  |
|                    | onDragEnter onDragExit                                                |
|                    | onDragLeave onDragOver onDragStart onDrop onMouseDown                 |
|                    | onMouseEnter onMouseLeaveonMouseMove onMouseOut onMouseOver onMouseUp |
| Pointer events     | onPointerDown onPointerMove onPointerUp onPointerCancel               |
|                    | onGotPointerCapture                                                   |
|                    | onLostPointerCapture onPointerEnter onPointerLeave                    |
|                    | onPointerOver onPointerOut                                            |
| Selection events   | onSelect                                                              |
| Touch events       | onTouchCancel onTouchEnd onTouchMove onTouchStart                     |
| UI events          | onScroll                                                              |
| Wheel events       | onWheel                                                               |
| Media events       | onAbort onCanPlay onCanPlayThrough onDurationChange                   |
|                    | onEmptied onEncrypted                                                 |
|                    | onEnded onError onLoadedData onLoadedMetadata onLoadStart             |
|                    | onPause onPlay                                                        |
|                    | onPlaying onProgress onRateChange onSeeked onSeeking                  |
|                    | onStalled onSuspend                                                   |
|                    | onTimeUpdate onVolumeChange onWaiting                                 |
| Image events       | onLoad onError                                                        |
| Animation events   | onAnimationStart onAnimationEnd onAnimationIteration                  |
| Transition events  | onTransitionEnd                                                       |
| Other events       | onToggle                                                              |

** Adding to the "Capture" phase

By default, events are added to the "bubble" phase (see [[id:77b9d50f-bd7f-4021-9794-509347634cc0][Events]] in [[id:ccd90ef7-390c-4623-9a21-49340850109b][Javascript]] for info on event phases). To add a listener on the "capture" phase, use the =*Capture= suffix.

#+BEGIN_SRC html
<main onClickCapture={handler1} onClick={handler4}>
 <button onClickCapture={handler2} onClick={handler3} />
</main>
#+END_SRC

** Note on event bubbling for mouse events
mouseEnter/mouseLeave and pointerEnter/pointerLeave have some unusual behavior. See [[https://mortenbarklund.com/blog/today-learned-how-mouse-events-bubble-in-react/][this article]] for info.

** Nonbubbling [[id:d99e159b-96af-4464-831b-b812e5621144][DOM]] events
In the [[id:d99e159b-96af-4464-831b-b812e5621144][DOM]], blur and focus events don't bubble, but note that they do in [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]].

** Default actions and how to prevent them
Sometimes, we want to prevent the default behavior of some events. A common example is clicking a button within a form: usually, this causes the form to submit and the entire page to refresh.

By using ~evt.preventDefault()~ on the event object passed to the event handler, we can prevent the default behavior.

Example: We want to enable some admin behavior if the user inputs their password as =platypus= (obviously a terrible idea in practice).

#+BEGIN_SRC javascript
import { useState } from "react";
function Admin() {
  const [password, setPassword] = useState("");
  const [isAdmin, setAdmin] = useState(false);
  const onSubmit = (evt) => {
    if (password === "platypus") {
      setAdmin(true);
    }
  };
  return isAdmin ? (
    <h1>Bacon is delicious!</h1>
  ) : (
    <form onSubmit={onSubmit}>
      <input
        type="password"
        onChange={(evt) => setPassword(evt.target.value)}
      />
      <button>Login</button>
    </form>
  );
}
function App() {
  return <Admin />;
}
export default App;
#+END_SRC

Another example would be preventing clicking on an ~href~ from navigating to that page.

Some events are not cancellable. Check by looking at the ~.cancellable~ property.

** Examples
Example: onClick event
#+BEGIN_SRC javascript
import { useState } from "react";
function Counter() {
  const [counter, setCounter] = useState(0);
  const onClick = () =>
    setCounter((value) => value + 1);
  return (
    <>
      <h1>Value: {counter}</h1>
      <button onClick={onClick}>Increment</button>
    </>
  );
}
function App() {
  return <Counter />;
}
export default App;
#+END_SRC

Example: onMouseMove event
#+BEGIN_SRC javascript
import { useState, useEffect } from "react";
function MouseStatus () {
  const [inMoving, setMoving] = useState(false);
  const onMouseMove = () => setMoving(true);
  useEffect(() => {
    if (!isMoving) return;
    const timeout = setTimeout(() => setMoving(false), 500);
    return () => clearTimeout(timeout);
  }, [isMoving]);
  return (
    <section onMouseMove={onMouseMove}>
      <h2>
        The mouse is {!isMoving && "not"} moving: {isMoving ? "✓" : "✗"}
      </h2>
    </section>
  );
}
function App() {
  return <MouseStatus />;
}
export default App;
#+END_SRC

Example: A very simple video player
#+BEGIN_SRC javascript
import { useState, useRef } from "react";
const VIDEO_SRC =
  "//images-assets.nasa.gov/video/One Small Step/One Small Step~orig.mp4";
function VideoPlayer() {
  const [isPlaying, setPlaying] = useState(false);
  const onPlay = () => setPlaying(true);
  const onPause = () => setPlaying(false);
  const onClickPlay = () => video.current.play();
  const onClickPause = () => video.current.pause();
  const video = useRef();
  return (
    <section>
      <video
        ref={video}
        src={VIDEO_SRC}
        controls
        width="480"
        onPlay={onPlay}
        onPause={onPause}
      />
      <button onClick={isPlaying ? onClickPause : onClickPlay}>
        {isPlaying ? "Pause" : "Play"}
      </button>
    </section>
  );
}

function App() {
  return <VideoPlayer />;
}

export default App;
#+END_SRC

* Forms
:PROPERTIES:
:ID:       33475990-87d3-4ece-b85c-d6fd6e1cfc7b
:END:

Forms in React can be controlled or uncontrolled. Controlled means that [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] is driving the changes and must confirm the given changes, whereas uncontrolled means that [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] only passively reads the state. The only reason to use uncontrolled forms is for performance.

To make an input field controlled, you must specify the ~value~ and ~onChange~ properties.

Example: Two number input fields to sum together.

#+BEGIN_SRC javascript
import { useState } from "react";
function Sum() {
  const [first, setFirst] = useState(0);
  const [second, setSecond] = useState(0);
  const onChangeFirst = (evt) =>
    setFirst(evt.target.valueAsNumber);
  const onChangeSecond = (evt) =>
    setSecond(evt.target.valueAsNumber);
  return (
    <form style={{ display: "flex", flexDirection: "column" }}>
      <label>
        A:
        <input
          type="number"
          value={first}
          onChange={onChangeFirst}
        />
      </label>
      <label>
        B:
        <input
          type="number"
          value={second}
          onChange={onChangeSecond}
        />
      </label>
      <div>A+B: {first + second}</div>
    </form>
  );
}
function App() {
  return <Sum />;
}
export default App;
#+END_SRC

** Filtered input
We may want to "filter" a user's input as they type. For example, a field where only certain characters are valid.

Example: Hexdecimal color input and display (Note: There is ~<input type="color" />~, this is just an example)

#+BEGIN_SRC javascript
import { useState } from "react";
const PLACEHOLDER = `conic-gradient(
  gray 0.25turn, white 0 0.5turn,
  gray 0 0.75turn, white 0 1turn
)`;
function HexColor() {
  const [color, setColor] = useState("BADA55");
  // This filters the input, uppercases the entire thing, and filters out "bad" inputs.
  const onChange = (evt) =>
    setColor(
      evt.target.value
        .replace(/[^0-9a-f]/gi, "")
    );
  const outputStyle = {
    width: "20px",
    border: "1px solid",
    background: color.length === 6
      ? `#${color}`
      : PLACEHOLDER,
  };
  return (
    <form style={{ display: "flex" }}>
      <label>
        Hex color:
        <input value={color} onChange={onChange} />
      </label>
      <span style={outputStyle} />
    </form>
  );
}
function App() {
  return <HexColor />;
}
export default App;
#+END_SRC

** Masked input
Another scenario might be where we want to insert special characters as a user types, like a dash for an ID or parenthesis/spaces for phone numbers.

This can be acheived by modifying the ~onChange~.

Example: Ticket number input

#+BEGIN_SRC javascript
import { useState } from "react";
function TicketNumber() {
  const [ticketNumber, setTicketNumber] = useState("");
  const onChange = (evt) => {
    const [first = "", second = ""] = evt.target.value
      .replace(/[^0-9a-z]/gi, "")
      .slice(0, 6)
      .match(/.{0,3}/g);
    const value = first.length === 3
      ? `${first}-${secondo}`
      : first;
    setTicketNumber(value.toUpperCase());
  };
  const isValid = ticketNumber.length === 7;
  return (
    <form style={{ display: "flex" }}>
      <label>
        Ticket number:
        <input
          value={ticketNumber}
          onChange={onChange}
          placeholder="E.g. R1S-T2U"
        />
      </label>
      <span>{isValid ? "✓" : "✗"}
    </form>
  );
}
function App() {
  return <TicketNumber />;
}
export default App;
#+END_SRC

* React Context
:PROPERTIES:
:ID:       693da7bd-8492-4a6e-8bd3-c4f45b9971dc
:END:

React Context is a way to wrap a number of components with a value that all descendant components can access without going through properties. It is a solution to [[id:1edb99c5-8a4d-4755-994f-4c5f8857c64d][Prop drilling]].

You can use contexts by using ~createContext~ to create the context, and the [[id:7a4d6456-508c-43c9-a857-4dd958d49b0c][useContext]] hook to use the set value.

It is common practice to name a context variable in capital case, as it serves a similar purpose to a [[id:bb077623-5540-4767-b6d9-ae4301af5ef2][React]] component.

~createContext~ takes a single argument, which is the default value.

#+BEGIN_SRC javascript
import { createContext } from 'react';
const MyContext = createContext(defaultValue);
#+END_SRC

Context variables have two properties: ~Provider~ and ~Consumer~.

Provider is used to create a context that can be consumed. The consumer is used to consume the *nearest* provided context. You can use the same context many times in your application, and you can even nest the same context.

When you consume a context, you'll get the value provided by the *nearest* provider, going up the [[id:a91b6fb3-4209-45d0-80d1-6fa59b70a746][JSX]] document tree. If no provider exists above the consumer, the default value is given.

** Prop drilling
:PROPERTIES:
:ID:       1edb99c5-8a4d-4755-994f-4c5f8857c64d
:END:
The practice of adding properties to a component with the sole purpose of allowing that component to pass those properties on to other components is called *prop drilling*. You _drill_ the _property_ through many layers of components because you need to get it from the outside to the inside.

[[id:693da7bd-8492-4a6e-8bd3-c4f45b9971dc][React Context]] is one of the best tools to combat this.

** Examples

The below example uses contexts to set a ~name~ value that is used in several components.

#+BEGIN_SRC javascript
import { createContext, useContext } from "react";
const BUTTON_STYLE = {
  display: "inline-block",
  padding: "4px 10px",
  background: "transparent",
  border: "0",
};
const HEADER_STYLE = {
  display: "flex",
  justifyContent: "flex-end",
  borderBottom: "1px solid",
};
const NameContext = createContext();
function Button({ children }) {
  return <button style={BUTTON_STYLE}>{children}</button>;
}
function UserButton() {
  const name = useContext(NameContext);
  return <Button>👤 {name}</Button>;
}
function Header() {
  return (
    <header style={HEADER_STYLE}>
      <Button>Home</Button>
      <Button>Groups</Button>
      <Button>Profile</Button>
      <UserButton />
    </header>
  );
}
function Welcome() {
  const name = useContext(NameContext);
  return (
    <section>
      <h1>Welcome, {name}!</h1>
    </section>
  );
}
function Main() {
  return (
    <main>
      <Welcome />
    </main>
  );
}
function Dashboard({ name }) {
  return (
    <NameContext.Provider value={name}>
      <Header />
      <Main />
    </NameContext.Provider>
  );
}
function App() {
  return <Dashboard name="Alice" />;
}
export default App;
#+END_SRC
