:PROPERTIES:
:ID:       b4a820bc-0722-4dde-8b64-ad097b7b1f58
:ROAM_REFS: https://neetcode.io/courses/dsa-for-beginners/28
:END:
#+title: Graphs
#+filetags: :Data_Structures:

Graphs are a type of data structure, consisting of "Nodes" and "Edges".

(Vertices are another word for Nodes, Vertex is the singular)

E <= V^{2}
- This is because each vertex can have an edge with each node, including itself.


* Directed Graphs
:PROPERTIES:
:ID:       f8af1612-3939-42f0-8e1f-34a995904dd5
:END:
If the pointers connecting the edges together have a direction, this is called a _directed graph_. This means that if =A= points to =B=, then =B= does not necessarily point to =A= (though it could.)

[[id:df0100b8-8894-4071-864a-f5a56e357ea5][Binary Tree]]s are a type of directed graph.

* Undirected Graphs
:PROPERTIES:
:ID:       a079f029-54bc-4814-a348-2ea84abc2bdb
:END:

Contrary to [[id:f8af1612-3939-42f0-8e1f-34a995904dd5][Directed Graphs]], Undirected Graphs don't have direction. So each edge can go either direction.

* Matrix
:PROPERTIES:
:ID:       0739131a-6dbf-4033-889d-c5096cb44e81
:END:
A Matrix is a 2D [[id:721cecef-36a5-4fe7-9cf0-b885d92dc690][Array]], but it can be used to represent a graph.

#+BEGIN_SRC python
grid = [[0, 0, 0, 0],
        [1, 1, 0, 0],
        [0, 0, 0, 1],
        [0, 1, 0, 0]]
#+END_SRC

| 0 | 0 | 0 | 0 |
| 1 | 1 | 0 | 0 |
| 0 | 0 | 0 | 1 |
| 0 | 1 | 0 | 0 |

Imagine a 0 meaning a "free" space, and a 1 meaning a "blocked" space. If you are creating a "path", you can move through the zeroes, but not the ones. We can move in the [[id:60fb45c8-3f9e-402d-a95c-2fdbfc61651a][Cardinal Directions]].

Sometimes, diagonal movement is allowed, but it's less common.

In this case, this is an [[id:a079f029-54bc-4814-a348-2ea84abc2bdb][Undirected Graph]]. You can move from one node to another and back.

** Adjacency Matrix
:PROPERTIES:
:ID:       e4d738f0-b059-4253-9fa5-88f96d4f32e9
:END:

Take the same graph as before

| 0 | 0 | 0 | 0 |
| 1 | 1 | 0 | 0 |
| 0 | 0 | 0 | 1 |
| 0 | 1 | 0 | 0 |

We have rows and columns 0-3, so imagine that we have vertices =0=, =1=, =2=, and =3=.

In an [[id:e4d738f0-b059-4253-9fa5-88f96d4f32e9][Adjacency Matrix]], a 0 means that there is *not* and edge from the vertices represented by the x and y (row/column) indexes.

For example:
- The =0= at potision [0, 1] (row 0, column 1) means that there is *not* an edge from =0= to =1=.
- The =1= at position [2, 3] (row 2, column 3) means that there *is* an edge from =2= to =3=.
- The =1= at position [1, 1] means that there *is* an edge from =1= to itself.

This is an example of a [[id:f8af1612-3939-42f0-8e1f-34a995904dd5][Directed Graph]].

It's a bit rare to actually use an [[id:e4d738f0-b059-4253-9fa5-88f96d4f32e9][Adjacency Matrix]], because the space complexity is O(V^{2}).

** Adjacency List
:PROPERTIES:
:ID:       00f78124-16ba-4618-ab37-6a136d813315
:END:

[[id:00f78124-16ba-4618-ab37-6a136d813315][Adjacency List]]s are very similar to [[id:d0b02bbc-6d2e-4905-aba3-a3cbe3e97b20][Linked List]]s. They consist of nodes with values that have connections to other nodes (vertices).

#+BEGIN_SRC python
class GraphNode:
    def __init__(self, val):
        self.val = val
        self.neighbors = []
#+END_SRC

In this example, ~neighbors~ is a list of ~GraphNode~. ~neighbors~ tells us which other vertices the ~GraphNode~ has edges to (in other words, which other nodes it points to).

This is an example of a [[id:f8af1612-3939-42f0-8e1f-34a995904dd5][Directed Graph]]. You could also implement an [[id:a079f029-54bc-4814-a348-2ea84abc2bdb][Undirected Graph]] using this structure.

Another common way to represent [[id:00f78124-16ba-4618-ab37-6a136d813315][Adjacency List]]s is with a [[id:26fcbf3c-dee7-40a8-92e3-2fa7079c97e4][HashMap]]/dictionary of [[id:721cecef-36a5-4fe7-9cf0-b885d92dc690][Array]]s/lists.

#+BEGIN_SRC python
adjacency_list = {}
edges = [["A", "B"], ["B", "C"], ["B", "E"], ["C", "E"], ["E", "D"]]

for node_val, neighbor in edges:
    if node_val not in adjacency_list:
        adjacency_list[node_val] = []
    if neighbor not in adjacency_list:  # Need this, in case the "neighbor" node does not have any neighbors.
        adjacency_list[neighbor] = []
    adjacency_list[node_val].append(neighbor)
#+END_SRC

This is a directed graph, where a key represents the node and the "neighbors" represents the nodes it connects to.

*** Depth First Search
For an Adjacency List, depth first search looks something like this:

#+BEGIN_SRC python
def dfs(node: str, target: str, adjacency_list: dict[str, str], visited_nodes: set[str]) -> int:
    if node in visited_nodes:
        return 0
    if node == target:
        return 1

    count = 0
    visited_nodes.add(node)
    for neighbor in adjacency_list[node]:
        count += dfs(neighbor, target, adjacency_list, visited_nodes)
    visited_nodes.remove(node)

    return count
#+END_SRC

*** Breadth First Search

#+BEGIN_SRC python
def bfs(node: str, target: str, adjacency_list: dict[str, str]) -> int:
    length = 0
    visited_nodes = set()
    visited_nodes.add(node)
    queue = deque()
    queue.append(node)

    while queue:
        for i in range(len(queue)):
            current = queue.poplest()
            if current == target:
                return length

            for neighbor in adjacency_list[current]:
                if neighbor not in visited_nodes:
                    visited_nodes.add(neighbor)
                    queue.append(neighbor)

        length += 1

    return length

print(bfs("A", "E", adjacency_list))
#+END_SRC

**** Time complexity
O(V + E)

**** Space Complexity
O(V)

** Matrix Depth First Search
:PROPERTIES:
:ID:       7aa2c5e2-2a07-48ad-b04c-d28ff733bab3
:END:

Imagine we want to count every unique path from the top left of the matrix to the bottom right. We can use [[id:ee841753-8ab3-49ae-8274-d7bf89c9e04f][Depth First Search]] to accomplish this.

| 0 | 0 | 0 | 0 |
| 1 | 1 | 0 | 0 |
| 0 | 0 | 0 | 1 |
| 0 | 1 | 0 | 0 |

Visit every =0= node and create a path. Note that you cannot visit a =0= that has already been visited. Doing so could cause an infinite loop.

#+BEGIN_SRC python
def dfs(grid, r, c, visit):  # "visit" is a hash set of all the positions we have visited thus far.
    ROWS, COLS = len(grid), len(grid[0])  # Gets the size of the rows and columns. (This could be calculated once and passed as a param instead.)

    # These are the two base cases.
    if min(r, c) < 0 or  # Out of bounds.
        r == ROWS or c == COLS or  # Also out of bounds.
        (r, c) in visit or  # Position has already been visited.
        grid[r][c] == 1:  # Position has a "1", this way is blocked.
        return 0  # No valid path.
    if r == ROWS - 1 and c == COLS - 1:  # If we are at the bottom right position (success!).
        return 1  # We have found a valid path.

    visit.add((r, c))  # Add the current position to the "visited" hash set.

    count = 0
    count += dfs(grid, r + 1, c, visit)  # Move down
    count += dfs(grid, r - 1, c, visit)  # Move up
    count += dfs(grid, r, c + 1, visit)  # Move right
    count += dfs(grid, r, c - 1, visit)  # Move left

    visit.remove((r, c))  # Mark the position as "unvisited". This enables backtracking.
    return count

print(dfs(grid, 0, 0, set()))
#+END_SRC

Version of above with better variable names and type hints:

#+BEGIN_SRC python
def matrix_depth_first_search(grid: list[list[int]], row: int, col: int, visited: set) -> int:
    ROWS, COLS = len(grid), len(grid[0])

    if min(row, col) < 0 or
        row == ROWS or col == COLS or
        (row, col) in visited or
        grid[row][col] == 1:
        return 0
    if row == ROWS - 1 and col == COLS - 1:
        return 1

    visited.add((row, col))

    count = 0
    count += matrix_depth_first_search(grid, row + 1, col, visited)
    count += matrix_depth_first_search(grid, row - 1, col, visited)
    count += matrix_depth_first_search(grid, row, col + 1, visited)
    count += matrix_depth_first_search(grid, row, col - 1, visited)

    visited.remove((row, col))

    return count
#+END_SRC

#+RESULTS:

*** Time Complexity
The worst case would be a matrix with no blocked paths. Each node would have four choices, and there would be the size of the matrix rows (n) times cols (m).

O(4^{n * m})

Not very efficient.

*** Space Complexity
Each recursive call adds to the stack.

O(n * m)

** Matrix Breadth First Search
:PROPERTIES:
:ID:       c91ba9b2-6ac6-4733-bb2a-fc0f820c532c
:END:

[[id:3bd27895-fcc3-496c-8fa7-a149295140a6][Breadth First Search]] is commonly used to find the shortest path in a graph.

#+BEGIN_SRC python
def bfs(grid):
    ROWS, COLS = len(grid), len(grid[0])
    visit = set()
    queue = deque()
    queue.append(0, 0)
    visit.add((0, 0))

    length = 0
    while queue:
        for i in range(len(queue)):
            r, c = queue.popleft()
            if r == ROWS - 1 and c == COLS - 1:
                return length

            neighbors = [[0, 1], [0, -1], [1, 0], [-1, 0]]
            for dr, dc in neighbors:
                if (min(r + dr, c + dc) < 0 or
                    r + dr == ROWS or c + dc == COLS or
                    (r + dr, c + dc) in visit or grid[r + dr][c + dc] == 1):
                    continue
                queue.append((r + dr, c + dc))
                visit.add((r + dr, c + dc))
        length += 1
#+END_SRC
