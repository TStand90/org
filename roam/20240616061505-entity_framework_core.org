:PROPERTIES:
:ID:       915de906-dc3c-4c69-88b3-bb7f357e670d
:ROAM_REFS: https://learn.microsoft.com/en-us/ef/core/modeling/ https://learn.microsoft.com/en-us/ef/core/
:END:
#+title: Entity Framework Core

Entity Framework Core is the default [[id:36090c85-6652-4213-b39e-197e4c83b8df][ORM]] for [[id:2b730c77-767a-4547-b1bf-53428b3d33a5][ASP.NET Core]]. It supports both [[id:79fb2606-57a3-4b32-bf3d-e1b0594822f0][Relational Databases]] and [[id:a21d60d5-6e64-4715-926b-8d725dc8c963][Non-Relational Databases]], but [[id:1291b5b2-5d3d-4736-8030-e76c54c7c5dd][SQL]] databases are the most commonly used.

* Non-nullable types
The [[id:79749f8d-44ba-4013-b4f8-5a8c3c391128][required]] keyword can be used to denote a non-nullable field in the model.

#+BEGIN_SRC csharp
public class Recipe
{
    public int RecipeId { get; set; }
    public required string Name { get; set; }  // Cannot be null
    public TimeSpan TimeToCook { get; set; }
    public bool IsDeleted { get; set; }
    public required string Method { get; set; }
    public required ICollection<Ingredient> Ingredients { get; set; }
}
#+END_SRC

* Default Ids

Entity Framework Core will identify properties with the ~Id~ suffix and assign them as unique IDs in the database.

#+BEGIN_SRC csharp
public class Recipe
{
    public int RecipeId { get; set; }
    public required string Name { get; set; }
    public TimeSpan TimeToCook { get; set; }
    public bool IsDeleted { get; set; }
    public required string Method { get; set; }
    public required ICollection<Ingredient> Ingredients { get; set; }
}
public class Ingredient
{
    public int IngredientId { get; set; }
    public int RecipeId { get; set; }
    public required string Name { get; set; }
    public decimal Quantity { get; set; }
    public required string Unit { get; set; }
}
#+END_SRC

In the above example, ~RecipeId~ is automatically assigned as the unique ID for ~Recipe~, as is ~IngredientId~ for ~Ingredient~. Also, ~RecipeId~ on ~Ingredient~ is registered as a foreign key to ~Recipe~. ~ICollection<Ingredient>~ also allows for the many-to-one relationship from ~Recipe~ to ~Ingredient~.
