:PROPERTIES:
:ID:       a39ecfb9-066d-4f6b-8cae-0f1c13345b0d
:ROAM_REFS: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
:END:
#+title: Javascript

Javascript is a programming language that proves Stockholm Syndrome is real.

* Concepts
** Promises
A Promise in [[id:a39ecfb9-066d-4f6b-8cae-0f1c13345b0d][Javascript]] is a proxy for a value that isn't known when the Promise is created. It allows async methods to return values as if they were synchronous. The async method returns a *promise* to supply the value some time in the future.

Promises have three states:
- Pending: Initial state
- Fulfilled: Success
- Rejected: Operation failed

A Promise is "settled" if it is either Fulfilled or Rejected. Also called "resolved".

*** Chaining Promises
The methods ~Promise.prototype.then()~, ~Promise.prototype.catch()~, and ~Promise.prototype.finally()~ are used to associate a Promise with some further action after it is settled. The first argument is a callback function for the successful case, and the second argument is a callback for the rejected case. ~.then()~ generates a new Promise, which allows Promise chaining.

#+BEGIN_SRC javascript
const myPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("foo");
  }, 300);
});

myPromise
  .then(handleFulfilledA, handleRejectedA)
  .then(handleFulfilledB, handleRejectedB)
  .then(handleFulfilledC, handleRejectedC);
#+END_SRC

Unless the error from a failed Promise needs to be handled immediately, prefer adding a ~.catch()~ to the end of the chain instead of defining an error callback for each ~.then()~:

#+BEGIN_SRC javascript
myPromise
  .then(handleFulfilledA)
  .then(handleFulfilledB)
  .then(handleFulfilledC)
  .catch(handleRejectedAny);
#+END_SRC

Using [[id:0ad57b5d-7a3a-420f-85e6-0fc4349d9a8a][Arrow Functions]] can simplify things further:

#+BEGIN_SRC javascript
myPromise
  .then((value) => `${value} and bar`)
  .then((value) => `${value} and bar again`)
  .then((value) => `${value} and again`)
  .then((value) => `${value} and again`)
  .then((value) => {
    console.log(value);
  })
  .catch((err) => {
    console.error(err);
  });
  #+END_SRC

* [[id:1e56325a-f43c-4059-9605-d1349e62d641][Getters and Setters]]
[[id:a39ecfb9-066d-4f6b-8cae-0f1c13345b0d][Javascript]] supports [[id:1e56325a-f43c-4059-9605-d1349e62d641][Getters and Setters]].

#+BEGIN_SRC javascript
let hat = {
    name: "Hat",
    _price: 100,
    priceIncTax: 100 * 1.2,

    set price(newPrice) {
        this._price = newPrice;
        this.priceIncTax = this._price * 1.2;
    },

    get price() {
        return this._price;
    }
};

let boots = {
    name: "Boots",
    price: "100",

    get priceIncTax() {
        return Number(this.price) * 1.2;
    }
}

console.log(`Hat: ${hat.price}, ${hat.priceIncTax}`);
hat.price = 120;
console.log(`Hat: ${hat.price}, ${hat.priceIncTax}`);

console.log(`Boots: ${boots.price}, ${boots.priceIncTax}`);
boots.price = "120";
console.log(`Boots: ${boots.price}, ${boots.priceIncTax}`);
#+END_SRC

* Methods
In [[id:a39ecfb9-066d-4f6b-8cae-0f1c13345b0d][Javascript]], a method is a property whose value is a function. There are two ways of defining a method on a [[id:a39ecfb9-066d-4f6b-8cae-0f1c13345b0d][Javascript]] class.

#+TITLE: Javascript methods definition example #1
#+BEGIN_SRC javascript
let hat = {
    name: "Hat",
    _price: 100,
    priceIncTax: 100 * 1.2,
 
    writeDetails: function() {
        console.log(`${this.name}: ${this.price}, ${this.priceIncTax}`);
    }
};
#+END_SRC

#+TITLE: Javascript methods definition example #2
#+BEGIN_SRC javascript
let hat = {
    name: "Hat",
    _price: 100,
    priceIncTax: 100 * 1.2,

    writeDetails() {
        console.log(`${this.name}: ${this.price}, ${this.priceIncTax}`);
    }
};
#+END_SRC
