:PROPERTIES:
:ID:       1c0131b0-54d9-4b00-9214-3920c53984d2
:END:
#+title: F#

F# is functional [[id:684e6719-609f-4a8a-a8fa-f11d0585ec10][C#]].

* Creating a console application
To create a new F# console app, use the following command.

#+BEGIN_SRC shell
dotnet new console -lang F#
#+END_SRC

* Typing
F# is a [[Id:ea14196c-d3da-4d52-ba27-648d81c50ce3][statically typed]] language, but it also has a very powerful /type inference/ engine.

* [[id:6e9a83b4-be40-427b-95c5-a7b9a4b0da9a][REPL]]
F# has its own [[id:6e9a83b4-be40-427b-95c5-a7b9a4b0da9a][REPL]] called FSI, which can be started with ~dotnet fsi~.

* What is "it"?
In the [[id:6e9a83b4-be40-427b-95c5-a7b9a4b0da9a][REPL]], you may notice ~val it~ in executed commands. ~it~ is the default symbol that expressions are bound to if you don't supply one.

So, executing ~1 + 1;;~ is the same as executing ~let it = 1 + 1;;~

* Interactive scripts
Files ending in the =.fsx= extension are F# scripts.

You can use these files to more interactively work with the [[id:6e9a83b4-be40-427b-95c5-a7b9a4b0da9a][REPL]], with Intellisense and all that IDE good stuff.

* Syntax
** Syntax basics
*** Whitespace for scoping.
F# does not use curly braces for scoping or declaring function bodies. Like [[id:3a948b50-dedc-4fdf-a86c-05c1c3a9f230][Python]], it uses whitespace (four spaces).

*** Let vs var
~var~ declares variables, ~let~ creates an immutable reference to a value. Once you've bound a value to a symbol with ~let~, it cannot be changed.

*** Declaring functions
Here is an example of a function declaration that adds the first two numbers, multiplies them by the third, and returns a string with the answer

#+BEGIN_SRC fsharp
let addThenMultiply first second third =
    let inProgress = first + second
    let answer = inProgress * third

    $"The answer is {answer}"
#+END_SRC

Notice that there are no parenthesis around the method arguments, and the equals sign at the end of the line. Function declarations use the same ~let~ keyword that symbol binding does. This is because functions are the same as any other value in F#, and can be treated as such.

** Scoping
*** Nested scopes
It's common in F# to use arbitrary scopes to nest statements.

Here's an example of some code with no scopes.

#+BEGIN_SRC fsharp
let fname = "Frank"
let sname = "Schmidt"
let fullName = $"{fname} {sname}"
let greetingText = $"Greetings, {fullName}"
#+END_SRC

This is fine, but ~fname~ and ~sname~ are only used to create ~fullName~. Also, ~fullName~ is only used to construct ~greetingText~. Therefore, we can rewrite in this way:

#+BEGIN_SRC fsharp
let greetingText =
    let fullName =
        let fname = "Frank"
        let sname = "Schmidt"
        $"{fname} {sname}"
    $"Greetings, {fullName}"
#+END_SRC

*** Nested functions
Because functions are just values, you can create nested functions inside scopes or other functions.

Here is the example in "Nested scopes" again:

#+BEGIN_SRC fsharp
let greetingTextWithFunction person =
    let makeFullName fname sname =
        $"{fname} {sname}"
    let fullName = makeFullName "Frank" "Schmidt"
    $"Greetings {fullName} from {person}."
#+END_SRC

*** Accessing outer scoped values
You cannot access symbols that are declared within a scope afterward. But if you declare a symbol before a nested scope starts, that scope will have access to it.

#+BEGIN_SRC fsharp
let greetingTextWithFunction =
    let city = "London"
    let makeFullName fname sname =
        $"{fname} {sname} from {city}"
    let fullName = makeFullName "Frank" "Schmidt"
    // let surnameCity = $"{sname} from {city}"  // This statement is invalid.
    $"Greetings, {fullName}"
#+END_SRC

Referencing outer scoped variables inside a function is known as capturing the value.

* Type inference
F# uses type inference with its ~let~ and ~var~ keywords.

F# uses a type inference implementation known as the [[id:c17d05ef-e38f-4c0c-a380-50fcf4a43e9c][Hindley-Milner type system]], which is more powerful than systems found in ones like [[id:684e6719-609f-4a8a-a8fa-f11d0585ec10][C#]].

You can be explicit with type definitions if you choose.

#+BEGIN_SRC fsharp
let i = 10
let i: int = 10
#+END_SRC

Both the examples above are the same. Note that the annotation comes /after/ the declaration, similar to [[id:1acbf81c-8e58-447c-8b07-a61d9710031c][Go]], [[id:4ad28b6e-cef9-4aae-9621-a214c906951c][TypeScript]], and [[id:335e0eec-b345-49bb-9ee2-56f50d5b28b7][Rust]].

If you are going to be explicit with types in the function signatures, you need parenthesis.

#+BEGIN_SRC fsharp
let add (a:int) (b:int) : int =
    let answer : int = a + b
    answer
#+END_SRC

** Generics

Here is an example of ~ResizeArray~, a [[id:e3f7ab88-17ea-4b07-94d5-4498b0681491][.NET]] list that will automatically resize as you add new items to it. In [[id:684e6719-609f-4a8a-a8fa-f11d0585ec10][C#]], ~ResizeArray~ is just a type alias for ~System.Collections.Generic.List<'T>~;

#+BEGIN_SRC fsharp
let explicit = ResizeArray<int>()
let typeHole = ResizeArray<_>()
let omitted = ResizeArray()

typeHole.Add 99
omitted.Add 10
#+END_SRC

The first expression sets the type to ~int~ explicitly. The other two let the compiler determine the type based on the usage (the call to ~Add~ in this case).

** Automatic Generalization
F# will automatically generalize functions. If F# decides an argument to a function is generic, it converts it to a generic for you.

#+BEGIN_SRC fsharp
let combineElements<'T> (a:'T) (b:'T) (c:'T) =
    let output = ResizeArray<'T>()
    output.Add a
    output.Add b
    output.Add c
    output

combineElements<int> 1 2 3
#+END_SRC

Note that this is *not* weak/dynamic typing. The following is invalid.

#+BEGIN_SRC fsharp
combineElements<int> 1 2 "test"
#+END_SRC

This results in an error.

However, automatic generalization means we can do away with type annotations and let the compiler do this all for us:

#+BEGIN_SRC fsharp
let combineElements a b c =
    let output = ResizeArray()
    output.Add a
    output.Add b
    output.Add c
    output

combineElements 1 2 3
#+END_SRC

The inputs to ~combineElements~ are generalized automatically.

** Limitations
Most cases where type inference doesn't work are around the object-oriented parts of F#. Any classes that you create or reference from [[id:684e6719-609f-4a8a-a8fa-f11d0585ec10][C#]] won't be inferred based on member access. This includes all of the framework class library. Types like ~String~ or ~DateTime~ can't be inferred based on member access.

Example:

#+BEGIN_SRC fsharp
let addThreeDays (theDate:System.DateTime) =
    theDate.AddDays 3

let addAYearAndThreeDays theDate =
    let threeDaysForward = addThreeDays theDate
    theDate.AddYears 1
#+END_SRC

~addThreeDays~ requires a type annotation to access the ~AddDays~ member. However, ~addAYearAndThreeDays~ doesn't require one since we used ~theDate~ by calling ~addThreeDays~, so the compiler can infer the type of ~theDate~.

* Expressions
Expressions and statements are two sides of the same coin. Here's how they work in F#:

|             | Returns something? | Has side-effects? |
|-------------+--------------------+-------------------|
| Expressions | Always             | Occasionally      |
| Statements  | Never              | Always            |

F# is an expression-oriented language. Virtually everything is an expression; there are no statements, or functions that return ~void~. This is why you don't need ~return~ in F#, since every branch of code must return /something/.

** Unit
How do we handle the case where our code doesn't return any value (like a function that prints something, or writes to the file system)?

F# has a built in ~unit~ that represents nothing. Unlike ~void~ in other languages, ~unit~ acts like a regular value that can be returned from any piece of code or even bound to a symbol. In this way, you could say every function returns a value, even if that value is ~unit~.

#+BEGIN_SRC fsharp
let printAddition a b =
    let answer = a + b
    printfn $"{a} plus {b} equals {answer}."
#+END_SRC

*** Interop with void
F# implicitly converts ~unit~ to ~void~, so anywhere you see [[id:e3f7ab88-17ea-4b07-94d5-4498b0681491][.NET]] code that returns ~void~, F# will represent it as ~unit~, and vice-versa.

*** Unit as an input
~unit~ can be an input to a function. This is useful if you want to have some code that is executed every single time it is called.

#+BEGIN_SRC fsharp
let getTheCurrentTime = System.DateTime.Now
let x = getTheCurrentTime
let y = getTheCurrentTime
#+END_SRC

The problem with this example is that ~getTheCurrentTime~ will always return the initial value. It won't recalculate once it has been bound. However, if we change the definition to take ~unit~ as an input, signified by ~()~, this changes the behavior:

#+BEGIN_SRC fsharp
let getTheCurrentTime () = System.DateTime.Now
let x = getTheCurrentTime ()
let y = getTheCurrentTime ()
#+END_SRC

*** Unit and side effects
Seeing ~unit~ in a function signature, as input /or/ output, is a sign that the function has some kind of side effect in it, and calling it multiple times will probably have different results every time:
- ~Unit~ as input: Probably calling some impure code that will affect the result (getting the current time, generating a random number, etc.)
- ~Unit~ as output: Probably writing to some I/O as the final action in the body (print to console, write to filesystem, save to database, etc.)

F# does not enforce purity, so it's still possible to write code that has side effects but does not use ~unit~

#+BEGIN_SRC fsharp
let addDays days =
    let newDays = System.DateTime.Today.AddDays days
    printfn $"You gave me {days} days and I gave you {newDays}"
    newDays
let result = addDays 3
#+END_SRC

** Ignore
Sometimes, you want to call a function for its side effects, but ignore what it returns.

In such cases, you must explicitly tell F# that you wish to ignore the result. This is done using the built-in F# function, ~ignore~. It simply takes in any value and gives back a ~unit~ value (which the compiler understands can be discarded without warning).

Example: Add several days, but don't care about the return.

#+BEGIN_SRC fsharp
let addSeveralDays() =
    ignore (addDays 3)
    ignore (addDays 5)
    addDays 7
#+END_SRC

* Immutable data
Data in F# is immutable by default. Mutable data is possible, but requires a bit more syntax.

#+BEGIN_SRC fsharp
let name = "marcus"
let mutable age = 0
age <- 1
if age = 1 then ...
#+END_SRC

* Composing Types
F# has a few way of defining its own types.

** Product types
Product types are "and" types. For example, a soccer player has a name, age, /and/ a team.

** Sum types
Sum types are "or" types. For example, a soccer player's position is either forward, middle, /or/ defense.

* Tuples
:PROPERTIES:
:ID:       fd6afca0-845a-412d-8e45-16239e02af07
:END:
Tuples are the quickest way to compose multiple fields together in F#. They're lightweight, easy to create, and quick to use.

#+BEGIN_SRC fsharp
let name = "marcus", "pawara-standridge"
let firstName, lastName = name
#+END_SRC

F# does not allow you to specify names for fields in a tuple. F# only knows that this tuple has two values, both of which are strings.

Tuples can be of more than one type.

#+BEGIN_SRC fsharp
let info = "marcus", "aarav", 1, "california"
#+END_SRC

The types are listed as ~string * string * int * string~.

** Wildcards
You can discard values you do not care about with the underscore symbol

#+BEGIN_SRC fsharp
let nameAndAge = "Aurora", "Ekta", 3
let firstName, middleName, _ = nameAndAge
#+END_SRC

The underscore is special in F#: It tells the type system that you explicitly don't want to use the value.

** Type inference
F# can infer tuples as both inputs and outputs of functions.

#+BEGIN_SRC fsharp
let makeDoctor name =
    let _, sname = name
    "Dr", sname
#+END_SRC

** Inline deconstruction
It's possible to deconstruct a tuple that's supplied to a function inline.

#+BEGIN_SRC fsharp
let makeDoctor (_, sname) =
    "Dr", sname
#+END_SRC

** Nesting
Tuples can also be nested.

#+BEGIN_SRC fsharp
let nameAndAge = ("Marcus", "Aarav"), 1
let name, age = nameAndAge
let (firstName, middleName), theAge = nameAndAge
#+END_SRC

** Tuple and ValueTuple
By default, F# tuples are compiled into the [[id:e3f7ab88-17ea-4b07-94d5-4498b0681491][.NET]] type ~System.Tuple~. These values are known as [[id:cbb4a1e8-6515-4ab7-bf58-c435ae0b7b27][reference types]]. They are stored on the heap and are subject to garbage collection.

When [[id:684e6719-609f-4a8a-a8fa-f11d0585ec10][C#]] later gained language-level support for tuples, the [[id:684e6719-609f-4a8a-a8fa-f11d0585ec10][C#]] team created an alternative called [[id:c7e7c246-c863-4be0-b0c3-53cbe0188a88][ValueTuple]]. They are stored on the stack and are not subject to garbage collection.

You can create value tuples in F# by preceding type annotations with the keyword ~struct~.

#+BEGIN_SRC fsharp
let makeDoctor (name : struct (string * string)) =
    let struct(_, sname) = name
    struct ("Dr", sname)
#+END_SRC

Which type is better? Both have performance implications. Reference types pay the cost of garbage collection, while value tuples pay the cost of copying a tuple whenever it is passed from one function to another.

Generally, stick with reference tuples unless you have a specific performance requirement.

Both interop with [[id:684e6719-609f-4a8a-a8fa-f11d0585ec10][C#]] without issue.

** Shortcomings of Tuples
Tuples are easy to use, but they have some key downsides

- It's not possible to assign names to elements
- The only way to get values out is via deconstruction

Tuples are best for simple values that are relatively short-lived.

* Records
:PROPERTIES:
:ID:       e4bf9d59-0697-4f51-bb0e-f8aa5d6d2141
:END:
Records are like Tuples, but are more structured.

Records allow for specifying names for each value, known as /fields/.

Unlike [[id:fd6afca0-845a-412d-8e45-16239e02af07][Tuples]], Records must be defined before using them.

#+BEGIN_SRC fsharp
type Person =
    {
        FirstName : string
        LastName : string
        Age : int
    }
#+END_SRC

It's also possible to define records on one line.

#+BEGIN_SRC fsharp
type Person = { FirstName : string; LastName: string; Age: int }
#+END_SRC

Notice the =;= separating the fields when declaring a record on one line.

Heres how to create an instance of the record.

#+BEGIN_SRC fsharp
let marcus =
    {
        FirstName = "Marcus"
        LastName = "Pawara-Standridge"
        Age = 1
    }
#+END_SRC

To consume, use dot notation:

#+BEGIN_SRC fsharp
let fullName = $"{marcus.FirstName} {marcus.LastName}"
#+END_SRC

It's possible to use both Records and [[id:fd6afca0-845a-412d-8e45-16239e02af07][Tuples]] in the definition of a record.

#+BEGIN_SRC fsharp
type Address =
    {
        Line1 : string
        Line2 : string
        Town : string
        Country : string
    }

type Person =
    {
        Name : string * string
        Address : Address
    }
#+END_SRC

Notice that ~Address~ must be declared before ~Person~.

** Copy and Update
Fields on [[id:e4bf9d59-0697-4f51-bb0e-f8aa5d6d2141][Records]] are immutable by default. If you try using the mutate operator (=<-=), you'll get a compiler error.

To change values, F# provides the /copy-and-update/ syntax.

#+BEGIN_SRC fsharp
let theAddress =
    {
        Line1 = "1st Street"
        Line2 = "Apt. 1"
        Town = "London"
        Country = "UK"
    }

let addressInDE =
    {
        theAddress with
            Town = "Berlin"
            Country = "DE"
    }
#+END_SRC

You can add the ~mutable~ keyword to a field to make it mutable, but this should only be done in a very small number of scenarios. Prefer immutability wherever possible.

** Equality Checking
Two records or tuples are considered the same if the data they store is the same.

#+BEGIN_SRC fsharp
let isaac =
    {
        Name = "Isaac", "Abraham"
        Address = theAddress
    }

let isaacTwo =
    {
        Name = "Isaac", "Abraham"
        Address = theAddress
    }

let areTheyTheSame = (isaac = isaacTwo) // true
#+END_SRC

** Value Type records
Records are [[id:cbb4a1e8-6515-4ab7-bf58-c435ae0b7b27][reference types]] by default. You can use the ~[<Struct>]~ attribute to turn a record into a [[id:6601a3de-da15-4c07-b934-4c6225fce6d2][value type]].

#+BEGIN_SRC fsharp
[<Struct>]
type address =
    {
        Line1 : string
        // ...
    }
#+END_SRC

** Anonymous Records
:PROPERTIES:
:ID:       78227198-a938-444a-bdff-cf3bda597a07
:END:

Anonymous records allow you to create a record without a formal definition. The =|= operator between the curly brackets denotes an anonymous record.

#+BEGIN_SRC fsharp
let company =
    {|
        Name = "My Company Inc."
        Town = "The Town"
        Country = "UK"
        TaxNumber = 123456
    |}
#+END_SRC

* Forward pipes
:PROPERTIES:
:ID:       8717dfd1-7008-44c4-9465-39e94fb158f7
:END:
F# has the forward pipe operator, which allows you to "pipe" the output of a function into another function. The piped value is piped to the _last_ argument in the function.

#+BEGIN_SRC fsharp
let pipelineSingleLine 10 |> add 5 |> add 7 |> multiply 2

let pipelineMultiline =
    10
    |> add 5
    |> add 7
    |> multiply 2
#+END_SRC

* Compose operator
:PROPERTIES:
:ID:       aaf6352f-8e29-4bd7-88f4-b950cbab3332
:END:
F# has a built in *compose* operator, which allows you to compose two functions together into a new one if the first's output matches the second's input.

It's not used that often, but it's worth keeping in mind.

Example: These two functions do the same thing.

#+BEGIN_SRC fsharp
let addFiveAndDouble input = input |> add 5 |> multiply 2
let addFiveAndDoubleShort = add 5 >> multiply 2
#+END_SRC

* Namespaces
:PROPERTIES:
:ID:       8d578b51-e915-45f0-940e-f66f195b6b52
:END:
F# supports namespaces for organizing code. Namespaces store types, but /not/ values.

#+BEGIN_SRC fsharp
namespace Foo
type Order = { Name: string }

namespace Bar.Baz
type customer =
    {
        Name : string
        LastOrder: Foo.Order
    }
#+END_SRC

To use something from a namespace, you can prepend the name of the namespace, like with ~Foo.Order~.

Alternatively, you cae use the ~open~ keyword.

#+BEGIN_SRC fsharp
namespace Bar.Baz
open Foo
type customer = { LastOrder: Order }
#+END_SRC

* Modules
:PROPERTIES:
:ID:       5056dc47-684e-4e95-9474-a0af286b559d
:END:
Modules are a way to store types /and/ values.

#+BEGIN_SRC fsharp
module FsInAction.MyMaths

let add x y = x + y
let subtract x y = x - y

module Complicated =
    open System
    let ten = 10
    let addTogetherThenSubtractTen x y = add x y |> subtract ten
#+END_SRC

Declaring a module within a module makes the second module a *child* of the first. Nested modules do not need to ~open~ their parents. Nested modules _must_ have their contents indented.

In scripts, declaring the module is optional. F# will use the name of the file as the module in that case.

** Private values
The ~private~ keyword can make a value private within a module. This can be useful for things like internal functions.

** [<AutoOpen>]
You can use ~[<AutoOpen>]~ to automatically open a module in its parent.

** [<RequireQualifiedAccess>]
~[<RequireQualifiedAccess>]~ essentially does the opposite of ~[<AutoOpen>]~: you cannot ~open~ the module, and must always use the module name to access its contents.

* Project file
F# projects include a project file, which have the =.fsproj= extension.

** Ordering of files
The order of files declared in the project matters. Files that are declared first cannot see files that are declared further down the list.

Therefore, files that have no dependencies should go at the top, and files that depend on everything else need to go at the bottom.

* #load directive
:PROPERTIES:
:ID:       b6a73bdd-e498-4c89-96b6-a98bfe01b0c3
:END:
You can load a =.fs= file directly into a script (and FSI) using the =#load= directive.

You can also load an entire DLL that you've build using =#r=. This can make loading an entire application or library easier.
