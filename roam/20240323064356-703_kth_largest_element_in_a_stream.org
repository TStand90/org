:PROPERTIES:
:ID:       b5f03f91-11e0-49d5-be9e-61085adaead6
:ROAM_REFS: https://leetcode.com/problems/kth-largest-element-in-a-stream/description/
:END:
#+title: 703. Kth Largest Element in a Stream
#+filetags: :Leetcode:

Difficulty: Easy

* Data Structures
** [[id:65163304-d9ac-401a-afe4-c2bf19fb73c3][Heap]]

* Problem
Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:

KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.


Example 1:

Input
["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]

Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8


Constraints:

1 <= k <= 104
0 <= nums.length <= 104
-104 <= nums[i] <= 104
-104 <= val <= 104
At most 104 calls will be made to add.
It is guaranteed that there will be at least k elements in the array when you search for the kth element.
* Solution
#+BEGIN_SRC python
import heapq


class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.min_heap = nums
        heapq.heapify(self.min_heap)

        self.pop_extras()

    def add(self, val: int) -> int:
        if len(self.min_heap) > 1 and self.min_heap[0] > val:
            return self.min_heap[0]

        heapq.heappush(self.min_heap, val)

        self.pop_extras()

        return self.min_heap[0]

    def pop_extras(self) -> None:
        while len(self.min_heap) > self.k:
            heapq.heappop(self.min_heap)
#+END_SRC

** Explanation
Because we never remove elements from the stream, we can just keep adding to a min-heap of size "K". The element at the root of the heap (the smallest element) will always be the "K-th largest" element of that heap. If the heap gets bigger than K, just pop the extraneous elements.

Also, if an element is smaller than the current root, there is no need to add it. An element smaller than the current root is never going to be larger than the current root, so it won't ever be the "K-th largest" element.
