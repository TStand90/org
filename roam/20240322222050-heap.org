:PROPERTIES:
:ID:       65163304-d9ac-401a-afe4-c2bf19fb73c3
:ROAM_REFS: https://neetcode.io/courses/dsa-for-beginners/23
:END:
#+title: Heap
#+filetags: :Data_Structures:

A [[id:df0100b8-8894-4071-864a-f5a56e357ea5][Binary Tree]] (but not a [[id:5c17f99f-22ff-4f57-9260-c3b3b2943105][Binary Search Tree]]). Implements a [[id:3be75ac9-fb2b-4118-a8b2-a8ee3cecf778][Priority Queue]].

Two types of heaps:
1. Min Heap
2. Max Heap

Heaps have two properties:
1. Structure Property
   A binary heap is a [[id:df0100b8-8894-4071-864a-f5a56e357ea5][Binary Tree]] that is a [[id:7beb40b4-ad3a-427b-ac76-9e7293871558][Complete Binary Tree]].
2. Order Property
   For a Min Heap, each node's value must be less than all of its children. So the root node of the tree must be the smallest element. This property is *recursive* as well, so any subtrees will have to enforce this rule for its children as well.

   For a Max Heap, the opposite is true. The root of the tree must be larger than all of its children.

Note that duplicate values are allowed in Heaps.

Despite Heaps being drawn an represented as [[id:df0100b8-8894-4071-864a-f5a56e357ea5][Binary Tree]]s, they are actually created in memory as [[id:721cecef-36a5-4fe7-9cf0-b885d92dc690][Array]]s. The array starts at ~1~, not ~0~. The ~0~ index is left intentionally blank.

The array starts at 1 so that the following math equations will work.

leftChild = 2 * i
rightChild = 2 * i + 1
parent = i / 2

These equations work to get these values for *any* node. They only work because Heaps are [[id:7beb40b4-ad3a-427b-ac76-9e7293871558][Complete Binary Tree]]s.

#+NAME: Heap Operations
| Name        | Complexity |
|-------------+------------|
| Get Min/Max | O(1)       |
| Push        | O(log n)   |
| Pop         | O(log n)   |
| Heapify     | O(n)       |
| Search      | O(n)       |

One advantage of Heaps over [[id:5c17f99f-22ff-4f57-9260-c3b3b2943105][Binary Search Tree]]s is that a Heap can get its min or max values (depending on what type of Heap it is) in O(1) time, whereas a [[id:5c17f99f-22ff-4f57-9260-c3b3b2943105][Binary Search Tree]] does so in O(log n). This is because a [[id:5c17f99f-22ff-4f57-9260-c3b3b2943105][Binary Search Tree]] needs to go all the way to the left of the tree for the min value, and all the way to the right for the max value. For the heap, these should just be the root value (again, depending on what type of Heap).

Another advantage is that by using Heapify, building the Heap is also faster than building a [[id:5c17f99f-22ff-4f57-9260-c3b3b2943105][Binary Search Tree]], since a BST takes O(n log n) to build.

A major disadvantage of Heaps is that searching for an element is slow. Because elements are duplicated, and the tree is not a [[id:5c17f99f-22ff-4f57-9260-c3b3b2943105][Binary Search Tree]], we must potentially traverse every element. Use [[id:5c17f99f-22ff-4f57-9260-c3b3b2943105][Binary Search Tree]] for searching.

* Push
To add an item to a heap, insert it into the last spot in the array. This satisfies the Structure Property.

Then, check it against its parent node. If the heap is a Min Heap, and the node that was inserted is larger than its parent, swap them. For Max Heaps, it's the same check, just reversed.
This swapping occurs over and over until the Order Property is satisfied. This is called "percolating", or "percolate up".

#+BEGIN_SRC python
class Heap:
    def __init__(self):
        self.heap = [0]

    def push(self, val):
        self.heap.append(val)
        i = len(self.heap) - 1

        # Percolate up
        while self.heap[i] < self.heap[i // 2]:
            tmp = self.heap[i]
            self.heap[i] = self.heap[i // 2]
            self.heap[i // 2] = tmp
            i = i // 2
#+END_SRC

** Time Complexity
O(log n), The height of the tree. Because the tree is always balanced (because it is a [[id:7beb40b4-ad3a-427b-ac76-9e7293871558][Complete Binary Tree]]), the time complexity is always the height of the tree.

* Pop

When popping off the Heap, we always pop the first element (the root of the tree). This is because the first element is always the smallest, and thus has the highest priority.

After removing the root (the item in index ~1~ in the array), take the ~last~ element in the tree (the last element in the array) and put it at the root (index ~1~). This satisfies the
Structure Property. Obviously the Order Property will be violated at this point, so it needs to be fixed by percolating the new root down.

Swap the top node with the smaller child, recursively, until the Order Property is satisfied.

#+BEGIN_SRC python
def pop(self):
    if len(self.heap) == 1:
        # Heap is empty, nothing to pop (remember that index 0 is empty).
        return None
    if len(self.heap) == 2:
        # Only one node in the Heap.
        return self.heap.pop()

    # Store the value to pop, so it's not lost.
    res = self.heap[1]

    # Move last value to the root
    self.heap[1] = self.heap.pop()

    # Percolate down
    i = 1
    while 2 * i < len(self.heap):
        has_right_child = 2 * i + 1 < len(self.heap)  # Note that we don't need to check if a left child exists. That is guaranteed.
        right_child_less_than_left_child = self.heap[2 * i + 1] < self.heap[2 * i]
        current_node_greater_than_right_child = self.heap[i] > self.heal[2 * i + 1]

        # Swap the right child only if it exists, it's smaller than the left, and it's smaller than the current root.
        swap_right_child = has_right_child and right_child_less_than_left_child and current_node_greater_than_right_child

        # We swap the left only if we aren't swapping the right, and if the left child is smaller than the current root.
        swap_left_child = self.heap[i] > self.heap[2 * i]

        if has_right_child and right_child_less_than_left_child and current_node_greater_than_right_child:
            # Swap the right child
            temp = self.heap[i]
            self.heap[i] = self.heap[2 * i + 1]
            self.heap[2 * i + 1] = temp
            i = 2 * i + 1
        elif self.heap[i] > self.heap[2 * i]:
            # Swap the left child
            temp = self.heap[i]
            self.heap[i] = self.heap[2 * i]
            self.heap[2 * i] = tmp
            i = 2 * i
        else:
            break

    return res
#+END_SRC

* Heapify
Heapify is a way to turn an unstructured array of values into a Heap efficiently. This can be done in O(n) time, which makes Heaps faster to build than [[id:5c17f99f-22ff-4f57-9260-c3b3b2943105][Binary Search Tree]]s (since those take O(n log n) time to build).

Start by moving the item in index ~0~ to the end of the array, so that the item at index ~0~ is ~null~. This is necessary for the Heap's structure property.

When doing Heapify, we can skip all the leaf nodes. Those are already recursively "sorted".

#+BEGIN_SRC python
def heapify(self, arr):
    # Move the 0 index value to the end.
    arr.append(arr[0])

    self.heap = arr
    cur = (len(self.heap) - 1) // 2  # We may as well skip the leaf nodes.
    while cur > 0:
        # Percolate down.
        i = cur
        while 2 * i < len(self.heap):
            if (2 * i + 1 < len(self.heap) and
            self.heap[2 * i + 1] < self.heap[2 * i] and
            self.heap[i] > self.heap[2 * i + 1]):
                # Swap right child
                tmp = self.heap[i]
                self.heap[i] = self.heap[2 * i + 1]
                self.heap[2 * i + 1] = tmp
                i = 2 * i + 1
            elif self.heap[i] > self.heap[2 * i]:
                # Swap left child
                tmp = self.heap[i]
                self.heap[i] = self.heap[2 * i]
                self.heap[2 * i] = tmp
                i = 2 * i
            else:
                break
        cur -= 1
#+END_SRC

Notice how the "percolate down" is the same as it was in the ~Pop~ operation. In a real class, you could extract the "percolate down" function into its own method.

* Leetcode
** [[id:d609edb6-4bcc-4751-959b-b61050715da9][#+title: 215. Kth Largest Element in an Array]]
** [[id:c6280f9a-77b1-45b5-a807-34d7432f391d][#+title: 973. K Closest Points to Origin]]
** [[id:1243f66c-2231-428d-86a6-3b8853a1ac03][1046. Last Stone Weight]]
