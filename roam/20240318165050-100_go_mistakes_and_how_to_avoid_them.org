:PROPERTIES:
:ID:       3cb386ec-d975-45e9-adcf-bb6254919586
:ROAM_REFS: https://www.manning.com/books/100-go-mistakes-and-how-to-avoid-them
:END:
#+title: 100 Go Mistakes and How to Avoid Them
#+filetags: :Go:Manning_Books:

* 1: Unintended Variable Shadowing
#+BEGIN_SRC go
var client *http.Client
if tracing {
    client, err := createClientWithTracing()
    if err != nil {
        return err
    }
    log.Println(client)
} else {
    client, err := createDefaultClient()
    if err != nil {
        return err
    }
    log.Println(client)
}
// Use client
#+END_SRC

The outer ~client~ variable is always nil, since the inner ~client~ used ~:=~ for the assignment instead of ~=~.

Can be solved by assigning within the block like this:

#+BEGIN_SRC go
var client *http.Client
var err error
if tracing {
    client, err = createClientWithTracing()
    if err != nil {
        return err
    }
} else {
    // Same logic
}
#+END_SRC

* 2: Unnecessary nested code

Avoid nesting ~if~ statements whenever possible, as they make the code harder to reason about.

#+BEGIN_SRC go
func join(s1, s2 string, max int) (string, error) {
    if s1 == "" {
        return "", errors.New("s1 is empty")
    } else {
        if s2 == "" {
            return "", errors.New("s2 is empty")
        } else {
            concat, err := concatenate(s1, s2)
            if err != nil {
                return "", err
            } else {
                if len(concat) > max {
                    return concat[:max], nil
                } else {
                    return concat, nil
                }
            }
        }
    }
}

func concatenate(s1 string, s2 string) (string, error) {
    // ...
}
#+END_SRC

Early ~return~ statements are helpful here:

#+BEGIN_SRC go
func join(s1, s2 string, max int) (string, error) {
    if s1 == "" {
        return "", errors.New("s1 is empty")
    }
    if s2 == "" {
        return "", errors.New("s2 is empty")
    }
    concat, err := concatenate(s1, s2)
    if err != nil {
        return "", err
    }
    if len(concat) > max {
        return concat[:max], nil
    }
    return concat, nil
}

func concatenate(s1 string, s2 string) (string, error) {
    // ...
}
#+END_SRC

* 3: Misusing init functions

[[id:8a473eba-98fc-4f63-945b-5b260a8aceba][init()]] functions are used to initialize packages. See the notes in [[id:8a473eba-98fc-4f63-945b-5b260a8aceba][init()]] for information on when not to use them.

* 4: Overusing getters and setters

[[id:1acbf81c-8e58-447c-8b07-a61d9710031c][Go]] has no automatic support for getters and setters like some other languages. [[id:1acbf81c-8e58-447c-8b07-a61d9710031c][Go]] considers getters and setters to be non-idiomatic for accessing struct fields.

[[id:1e56325a-f43c-4059-9605-d1349e62d641][Getters and Setters]] have several advantages, despite not being supported by the language. See the page on [[id:1e56325a-f43c-4059-9605-d1349e62d641][Getters and Setters]] for ideas on why they can be helpful.

There are some naming conventions in [[id:1acbf81c-8e58-447c-8b07-a61d9710031c][Go]] if you want to use [[id:1e56325a-f43c-4059-9605-d1349e62d641][Getters and Setters]]. For a field called ~balance~:
- The getter method should be named ~Balance~ (not ~GetBalance~).
- The setter method should be named ~SetBalance~.

[[id:1acbf81c-8e58-447c-8b07-a61d9710031c][Go]] emphasizes simplicity, which includes simplicity in how struct fields are accessed. This means that [[id:1e56325a-f43c-4059-9605-d1349e62d641][Getters and Setters]] should not be used for everything. They should only be used where necessary.

* 5: Interface pollution

Interfaces are powerful, but should not be overused.

#+BEGIN_QUOTE
The bigger the interface, the weaker the abstraction.

- Rob Pike
#+END_QUOTE
