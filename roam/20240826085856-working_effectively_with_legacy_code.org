:PROPERTIES:
:ID:       42a0e03e-ed8b-4922-96c0-d60ffed1f7b1
:END:
#+title: Working Effectively with Legacy Code
#+description: A book by Michael C. Feathers

* Chapter 1: Changing Software
:PROPERTIES:
:ID:       7d9ed93b-e047-4312-a8a9-3cf142c0baee
:END:

There are four primary reasons to change software.
1. Adding a feature
2. Fixing a bug
3. Improving the design
4. Optimizing resource usage

* Chapter 2: Working with Feedback
:PROPERTIES:
:ID:       c969fb5b-4892-4617-a065-c571a1f79161
:END:
[[id:341e261f-8bf0-4518-ad78-73d0f4b4b399][Unit Test]]s are invaluable for making changes to legacy code.

When classes depend directly on things that are hard to use in a test, they are hard to modify and hard to work with.

A lot of legacy code work involves breaking dependencies so that change can be easier.

*The Legacy Code Dilemma*
#+BEGIN_QUOTE
When we change code, we should have tests in place. To put tests in place, we often have to change code.
#+END_QUOTE

Examples: Primitive Parameter (385) and Extract Interface (362).

** The Legacy Code Change Algorithm
1. Identify change points
2. Find test points
3. Break dependencies
4. Write tests
5. Make changes and refactor

*** Identify change points
The places where you need to make your changes depends sensitively on your archetecture.

- [[id:dd0d7e4d-845b-49dc-bdac-ed6ed203523a][Chapter 16: I Don't Understand the Code Well Enough to Change It.]]
- [[id:b2c7ccd5-1f39-4ff5-8131-7c1fb13bb472][Chapter 17: My Application Has No Structure.]]

*** Find test points
Finding places to write tests for legacy code is not always easy.

- [[id:41d68397-7046-41dc-83f7-85bc3a7106ad][Chapter 11: I Need to Make a Change. What Methods Should I Test?]]
- [[id:5fe0534a-8d61-41bc-87b0-9aa3aabbd47f][Chapter 12: I Need to Make Many Changes in One Area. Do I Have to Break Dependencies for All the Classes Involved?]]

*** Break dependencies
Dependencies are often a huge impediment to testing. The two ways this problem manifests:
- Difficulty instantiating objects in test harnesses
- Difficulty running methods in test harnesses.

- [[id:8bdec501-dea0-4172-bb68-1367ecf6878e][Chapter 23: How Do I Know That I'm Not Breaking Anything?]]
- [[id:ba70d248-dbeb-40d2-b3d0-110fde4986d8][Chapter 9: I Can't Get This Class into a Test Harness.]]
- [[id:e304cda9-bf18-4a2a-9dfd-d3a74d3c2541][Chapter 10: I Can't Run This Method in a Test Harness.]]
- [[id:1b57e501-463c-49a7-9332-d72653cae96c][Chapter 22: I Need to Change a Monster Method and I Can't Write Tests for It.]]
- [[id:6cf272a1-b60b-4e93-aa92-341f66a08319][Chapter 7: It Takes Forever to Make a Change.]]

*** Write tests
- [[id:b8d9621f-28d2-44ce-92f8-c65f2dab0337][Chapter 13: I Need to Make a Change but I Don't Know What Tests to Write.]]

*** Make changes and refactor
- [[id:9fa2652c-2ac2-4cda-b331-f043746f42aa][Chapter 8: How Do I Add a Feature?]]
- [[id:9da59c39-ebfc-4048-b876-2d8e160367e2][Chapter 20: This Class Is Too Big and I Don't Want It to Get Any Bigger]]
- [[id:1b57e501-463c-49a7-9332-d72653cae96c][Chapter 22: I Need to Change a Monster Method and I Can't Write Tests for It.]]
- [[id:1d35f9c6-af51-4212-9bba-91cc36ca39b3][Chapter 21: I'm Changing the Same Code All Over the Place]]

* Chapter 3: Sensing and Separation
:PROPERTIES:
:ID:       fc4440ec-2c41-4fdc-a786-aa0abe39f55d
:END:

Generally, when we want to get tests in place, there are two reasons to break dependencies: /sensing/ and /separation/.
1. *Sensing* - We break dependencies to /sense/ when we can't access values our code computes.
2. *Separation* - We break dependencies to /separate/ when we can't even get a piece of code into a test harness to run.

*** Faking collaborators
Fake objects can be helpful when writings tests. An example might be a "Display" object which displays to some output screen (a cash register screen, perhaps). ~FakeDisplay~ could just hold and print out the string in the tests.

Fake objects can be created in [[id:0cabecd4-2482-413f-a76a-81ad31b6bd2b][Object Oriented]] languages by creating simple, fake classes (often using an interface shared with the real class).

Non [[id:5f847578-387b-47f2-9c6c-18aa0e899ebf][Object Oriented]] languages can still use the fake pattern, by defining alternate functions that record values in some global data structure that we access in tests. For more details, see [[id:d090755d-9397-4128-98cd-82c8ec222671][Chapter 19: My Project is Not Object-Oriented. How Do I Make Safe Changes?]]

*** Mock objects
Mock objects are a more advanced type of fake object. They are fakes that perform assertions internally.

Example: SaleTest in Java
#+BEGIN_SRC java
import junit.framework.*;

public class SaleTest extends TestCase
{
    public void testDisplayAnItem() {
        MockDisplay display = new MockDisplay();
        display.setExpectation("showLine", "Milk $3.99");
        Sale sale = new Sale(display);
        sale.scan("1");
        display.verify();
    }
}
#+END_SRC

Mocks tend to be better than Fake objects when they are available, but not every language supports them. Fake objects are oftentimes good enough.

* Chapter 4: The Seam Model
:PROPERTIES:
:ID:       85ffa26e-14d9-4563-8768-c5625a01ec92
:END:

** What is a Seam?
#+TITLE: Seam
#+BEGIN_QUOTE
A seam is a place where you can alter behavior in your program without editing in that place.
- Michael C. Feathers, Working Effectively With Legacy Code
#+END_QUOTE

#+TITLE: Enabling Point
#+BEGIN_QUOTE
Every seam has an enabling point, a place where you can make the decision to use one behavior or another.
- Michael C. Feathers, Working Effectively With Legacy Code
#+END_QUOTE

*** Example
#+BEGIN_SRC cpp
bool CAsyncSslRec::Init()
{
  // ... Some code up here
  if (!m_bFailureSent) {
    m_bFailureSent=TRUE;
    PostReceiveError(SOCKETCALLBACK, SSL_FAILURE);
  }
  // ... Some code down here
}
#+END_SRC

Let's imagine ~PostReceiveError~ is a global function that isn't part of the class. We want to avoid executing it when running tests.

We could add a method with the exact same signature to the ~CAsyncSslRec~ class.

#+BEGIN_SRC cpp
class CAsyncSslRec
{
  // ...
  virtual void PostReceiveError(UINT type, UINT errorcode);
  // ...
}
#+END_SRC

In the implementation file, we can add a body like this:

#+BEGIN_SRC cpp
void CAsyncSslRec::PostReceiveError(UINT type, UINT errorcode)
{
  ::PostReceiveError(type, errorcode);
}
#+END_SRC

That preserves the behavior. It's a bit of inderection, but we ultimately call the same global function.

We can now subclass the ~CAsyncSslRec~ class and override the PostReceiveError method.

#+BEGIN_SRC cpp
class TestingAsyncSslRec : public CAsyncSslRec
{
  virtual void PostReceiveError(UINT type, UINT errorcode)
  {
  }
}
#+END_SRC

We can now write tests for that code without the side effect.

This is an example of an /object seam/, which is available in object oriented programming languages.

** What good are Seams?
Seams can help break dependencies for the sake of writing tests. They do so without making drastic alterations to existing code.

** Seam Types
*** Preprocessing Seams
- Note taken on [2024-08-30 Fri 11:17] \\
  I would add examples here, but I don't work in these languages a lot. If I ever do, I'll revisit this.
Preprocessing Seams come up in languages like [[id:c3e62fad-98dc-4ee0-a155-fd48c924ea87][C]] and [[id:856eb9cd-3205-46f3-83e4-70825a935fd2][C++]].

*** Link Seams
- Note taken on [2024-08-30 Fri 11:23] \\
  Same as Preprocessing Seams, may come back to this later, but probably isn't too relevant for me right now.

*** Object Seams
These are the most useful seams available in [[id:0cabecd4-2482-413f-a76a-81ad31b6bd2b][Object Oriented]] languages.

When calling a method on an object, you can substitute the method body using inheritance. This way, you can define custom method behavior for tests. This is helpful if there are things you don't want to do during a test (call a database, hit an external API, etc.).

* Chapter 5: Tools
:PROPERTIES:
:ID:       6133839c-71e7-444c-be04-8cb8e08a8d22
:END:

** Refactoring Tools
There are many tools for various languages that can refactor code automatically.

Take caution when using these tools, however, as they may make unsafe changes, or changes you're not expecting.

** Mock Objects
Mock Objects are helpful in breaking up dependencies, especially in [[id:0cabecd4-2482-413f-a76a-81ad31b6bd2b][Object Oriented]] codebases

** Unit-Testing Harness
Various unit testing tools exist for different languages.

- [[id:06381540-2615-434f-a33e-98d778e63de2][xUnit]] is one of the more popular ones.
  - [[id:cb42f494-fb85-4423-b56e-40ab39841fbe][JUnit]] is the [[id:335ead28-9e9b-4df0-8e57-e270f8bf9447][Java]] version.
  - [[id:bab9f0de-5428-45fe-b8ad-07fc66cd70e7][NUnit]] is another for [[id:e3f7ab88-17ea-4b07-94d5-4498b0681491][.NET]] languages.

* Chapter 6: I Don't Have Much Time and I Have to Change It
:PROPERTIES:
:ID:       269d0141-1442-443e-bf04-32d6f338a26c
:END:

** Sprout Method
:PROPERTIES:
:ID:       3c0196e9-4ab9-4e7a-a28d-b068d2b85a4d
:END:
A "sprouted" method is when you take new functionality that you want to add to some code, and break it out into its own method. This is helpful when the old code is not under test, and you don't have time to bring it under test.

*** Steps
1. Identify where you need to make your code change.
2. If the change can be formulated as a single sequence of statements in one place in a method, write down a call for a new method that will do the work involved and then comment it out. Doing this before writing the new method itself can help you see what the new method will look like in context.
3. Determine what local variables you need from the source method, and make them arguments to the call.
4. Determine whether the sprouted method will need to return values to the source method. If so, change the call so that its return value is assigned to a variable.
5. Develop the sprout method using /test-driven development/.
6. Remove the comment in the source method to enable the call.

*** Advantages
- Clean separation from old, bad code, and new, better code.
- Easy to see the changes you made.
*** Disadvantages
- Old code is left untested and unimproved.
- May be unclear when reading later why the sprouted method was broken out into its own method.

** Sprout Class
:PROPERTIES:
:ID:       ea2eb027-9241-4a8f-89bd-61ed98e94f9b
:END:
Sometimes, it makes sense to create an entirely new class instead of just a method. /Sprout Class/ can come in handy here over /Sprout Method/.

*** Steps
1. Identify where you need to make your code change.
2. Think of a good name for the class. Write a commented out line that instantiates the class, and a commented out line that calls some method on that class.
3. Determine what local variables you need for the class, pass them to the classes' constructor.
4. Determine whether the sprouted class will need to return values to the source method. If so, provide a method in the new class that will supply those values, and add a call in the source method to receive those values.
5. Develop the sprout class test first, using /test-driven development/.
6. Remove the comment in the source method to enable the object creation and calls.

*** Advantages
- Allows you to move forward with your work with more confidence than making invasive changes.
*** Disadvantages
- Adds conceptual complexity to the code base.

** Wrap Method
:PROPERTIES:
:ID:       e0854ed1-cbc9-4a4d-b0fe-9dc19aeabb30
:END:
What if you need to add functionality in the same place a method is called, but you don't want to modify the original method? For example, in a method to pay an employee for their time worked, you also want to send a report to some log about the payment.

You could rename the original method, make it private, and expose a new wrapper method with the same name as the original method. This adds functionality, and does not require updating the callers.

Alternatively, you can add the wrapper method and leave the original alone, so callers have the option of not using the new functionality.

By "wrapping" an existing method in a new method, you can add functionality without modifying the code for the original method.

*** Steps
**** To replace the old method
1. Identify the method you need to change.
2. Rename the method and create the new method with the same name and signature as the old method.
3. Place a call to the old method in the new method.
4. Develop a method for the new feature, test first, and call it from the new method.
**** To leave the old method as-is
1. Identify the method you need to change.
2. Develop a new method using test-driven development.
3. Create another method that calls the new method and the old method.
*** Advantages
- Good way of getting new, tested functionality into an application when we can't easily write tests for the calling code.
- Does not increase the size of the original method (like [[id:3c0196e9-4ab9-4e7a-a28d-b068d2b85a4d][Sprout Method]] and [[id:ea2eb027-9241-4a8f-89bd-61ed98e94f9b][Sprout Class]]).
- Not intertwining code with one purpose with code that has another.
*** Disadvantages
- Can lead to poor method names.
- [[id:f303a682-6f21-4dac-a471-d150b5f70782][Extract Method]] may be a better approach when available.

** Wrap Class
:PROPERTIES:
:ID:       3f9b59a2-6e0c-4cd2-99fe-b0e1bde6fdb7
:END:

This is the class-based version of [[id:e0854ed1-cbc9-4a4d-b0fe-9dc19aeabb30][Wrap Method]].

*** When to use
- The behavior you want to add is completely independent, and you don't want to pollute the existing class with behavior that is low level or unrelated.
- The class has grown so large that you can't stand to make it worse.

*** Steps
1. Identify the method you need to change.
2. Create a class that accepts the class you are going to wrap as a constructor argument. [[id:69d9c2cb-eb61-4f3f-bf9f-bffa324c481d][Extract Implementer]] and [[id:f9307327-5991-41c1-af4a-e3c69bf65551][Extract Interface]] can be helpful here.
3. Create a method on that class, using test-driven development. Write another method that calls the new method and the old method on the wrapped class.
4. Instantiate the wrapper class in your code in the place where you need to enable the new behavior.


* Chapter 7: It Takes Forever to Make a Change.
:PROPERTIES:
:ID:       6cf272a1-b60b-4e93-aa92-341f66a08319
:END:

* Chapter 8: How Do I Add a Feature?
:PROPERTIES:
:ID:       9fa2652c-2ac2-4cda-b331-f043746f42aa
:END:

* Chapter 9: I Can't Get This Class into a Test Harness.
:PROPERTIES:
:ID:       ba70d248-dbeb-40d2-b3d0-110fde4986d8
:END:

* Chapter 10: I Can't Run This Method in a Test Harness.
:PROPERTIES:
:ID:       e304cda9-bf18-4a2a-9dfd-d3a74d3c2541
:END:

* Chapter 11: I Need to Make a Change. What Methods Should I Test?
:PROPERTIES:
:ID:       41d68397-7046-41dc-83f7-85bc3a7106ad
:END:

* Chapter 12: I Need to Make Many Changes in One Area. Do I Have to Break Dependencies for All the Classes Involved?
:PROPERTIES:
:ID:       5fe0534a-8d61-41bc-87b0-9aa3aabbd47f
:END:

* Chapter 13: I Need to Make a Change but I Don't Know What Tests to Write.
:PROPERTIES:
:ID:       b8d9621f-28d2-44ce-92f8-c65f2dab0337
:END:

* Chapter 14: Dependencies on Libraries Are Killing Me
:PROPERTIES:
:ID:       15004104-4888-4c93-90c6-cd71d8b9bf7d
:END:

* Chapter 15: My Application Is All API Calls
:PROPERTIES:
:ID:       e1cad0d0-5276-4f1a-829e-a34b48c0c10a
:END:

* Chapter 16: I Don't Understand the Code Well Enough to Change It.
:PROPERTIES:
:ID:       dd0d7e4d-845b-49dc-bdac-ed6ed203523a
:END:

* Chapter 17: My Application Has No Structure.
:PROPERTIES:
:ID:       b2c7ccd5-1f39-4ff5-8131-7c1fb13bb472
:END:

* Chapter 18: My Test Code Is in the Way
:PROPERTIES:
:ID:       1145c8c3-16e2-48ce-a358-4aa788e5b49a
:END:

* Chapter 19: My Project is Not Object-Oriented. How Do I Make Safe Changes?
:PROPERTIES:
:ID:       d090755d-9397-4128-98cd-82c8ec222671
:END:

* Chapter 20: This Class Is Too Big and I Don't Want It to Get Any Bigger
:PROPERTIES:
:ID:       9da59c39-ebfc-4048-b876-2d8e160367e2
:END:

* Chapter 21: I'm Changing the Same Code All Over the Place
:PROPERTIES:
:ID:       1d35f9c6-af51-4212-9bba-91cc36ca39b3
:END:

* Chapter 22: I Need to Change a Monster Method and I Can't Write Tests for It.
:PROPERTIES:
:ID:       1b57e501-463c-49a7-9332-d72653cae96c
:END:

* Chapter 23: How Do I Know That I'm Not Breaking Anything?
:PROPERTIES:
:ID:       8bdec501-dea0-4172-bb68-1367ecf6878e
:END:

* Chapter 24: We Feel Overwhelmed. It Isn't Going to Get Any Better
:PROPERTIES:
:ID:       0c087728-6b55-4eb1-96a0-2deb0c1ad86e
:END:

* Chapter 25: Dependency-Breaking Techniques
:PROPERTIES:
:ID:       2d973a0b-d2ed-400c-af9a-6e0816af35cf
:END:
** Preserve Signatures
:PROPERTIES:
:ID:       70f8af14-ef01-4b92-8b54-f19af6ed7790
:END:

** Extract and Override Call
:PROPERTIES:
:ID:       f3685e54-1ab0-4b72-a2d7-f8b04ed14038
:END:

#+BEGIN_SRC java
public class PageLayout
{
    private int id = 0;
    private List styles;
    private StyleTemplate template;

    // ...

    protected void rebindStyles() {
        styles = StyleMaster.formStyles(template, id);
        // ...
    }

    // ...
}
#+END_SRC

~PageLayout~ makes a call to the static function named ~formStyles~ on a class named ~StyleMaster~.

What if we want to /sense/ through ~formStyles~ or separate our dependency on ~StyleMaster~? One option is to extract the call to a new method and override it in a /testing subclass/.

#+BEGIN_SRC java
public class PageLayout
{
    private int id = 0;
    private List styles;
    private StyleTemplate template;

    // ...

    protected void rebindStyles() {
        styles = formStyles(template, id);
        // ...
    }

    protected List formStyles(StyleTemplate template, int id) {
        return StyleMaster.formStyles(template, id);
    }

    // ...
}
#+END_SRC

We can override the local ~formStyles~ methods for testing.

#+BEGIN_SRC java
public class TestingPageLayout extends PageLayout {
    protected List formStyles(StyleTemplate template, int id) {
        return new ArrayList();
    }
}
#+END_SRC

In this example, we don't need styles for whatever we are testing, so we can just return an empty list.

With an automated refactoring tool, this can be trivial. You can use [[id:f303a682-6f21-4dac-a471-d150b5f70782][Extract Method]].

Without automated tools, use the following steps:

1. Identify the call that you want to extract. Find the declaration of its method. Copy its method signature so that you can [[id:70f8af14-ef01-4b92-8b54-f19af6ed7790][Preserve Signatures]].
2. Create a new method on the current class. Give it the signature you've copied.
3. Copy the call to the new method and replace the call with a call to the new method.
4. Introduce a testing subclass and override the new method.

* Refactoring
:PROPERTIES:
:ID:       135e5b2e-997e-47ef-ada6-800505f38455
:END:
** Extract Implementer
:PROPERTIES:
:ID:       69d9c2cb-eb61-4f3f-bf9f-bffa324c481d
:END:
** Extract Interface
:PROPERTIES:
:ID:       f9307327-5991-41c1-af4a-e3c69bf65551
:END:
** Extract Method
:PROPERTIES:
:ID:       f303a682-6f21-4dac-a471-d150b5f70782
:END:
