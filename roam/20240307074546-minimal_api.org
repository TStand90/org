:PROPERTIES:
:ID:       08f2d5da-98ab-49b0-93fe-bc39d96f06d9
:ROAM_REFS: https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.routing.linkgenerator?view=aspnetcore-8.0
:END:
#+title: Minimal API
#+filetags: :ASP.NET_Core:

Minimal API is a way to create APIs in [[id:2b730c77-767a-4547-b1bf-53428b3d33a5][ASP.NET Core]].

* LinkGenerator
:PROPERTIES:
:ID:       769d0281-8138-47b5-9736-5892047b573b
:ROAM_REFS: https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.routing.linkgenerator?view=aspnetcore-8.0 https://livebook.manning.com/book/asp-net-core-in-action-third-edition/chapter-6/174
:END:

The ~LinkGenerator~ class is used to generate URLs in the application for a [[id:08f2d5da-98ab-49b0-93fe-bc39d96f06d9][Minimal API]].

#+NAME: LinkGenerator example
#+BEGIN_SRC csharp
app.MapGet("/product/{name}", (string name) => $"The product is {name}")
    .WithName("product");

app.MapGet("/links", (LinkGenerator links) =>
{
    string link = links.GetPathByName("product",
        new { name = "big-widget"});
    return $"View the product at {link}";
});
#+END_SRC

The name given by ~.WithName~ is case sensitive, and must be unique.

~LinkService~ is available anywhere in [[id:2b730c77-767a-4547-b1bf-53428b3d33a5][ASP.NET Core]]. It is automatically available to the [[id:08f2d5da-98ab-49b0-93fe-bc39d96f06d9][Minimal API]] handlers because it is automatically registered with the [[id:fdfd76f1-ea62-40fc-9cbc-ba323ca0b5cc][Dependency Injection]] container.

* JSON Serialization
Minimal API assumes all request bodies are in [[id:abe6269b-da95-4137-a110-3f5b841cdf92][JSON]]. It also uses [[id:e3f7ab88-17ea-4b07-94d5-4498b0681491][.NET]]'s built in [[id:ff642738-5525-4ac6-a261-ce7b605faf1a][System.Text.Json]], and it cannot be changed (so no using [[id:3fc36921-7ca1-4d3b-aae6-4b0c8de38428][Newtonsoft.Json]]). The serialization can be customized with some options, though.

#+BEGIN_SRC csharp
WebApplicationBuilder builder = WebApplication.CreateBuilder(args);
builder.Services.ConfigureRouteHandlerJsonOptions(o => {
   o.SerializerOptions.AllowTrailingCommas = true;
   o.SerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;
   o.SerializerOptions.PropertyNameCaseInsensitive = true;
});
#+END_SRC

** Methods
*** GetPathByName
*** GetUriByName

* [[id:fdfd76f1-ea62-40fc-9cbc-ba323ca0b5cc][Dependency Injection]]
[[id:fdfd76f1-ea62-40fc-9cbc-ba323ca0b5cc][Dependency Injection]] is used extensively in [[id:2b730c77-767a-4547-b1bf-53428b3d33a5][ASP.NET Core]], and [[id:08f2d5da-98ab-49b0-93fe-bc39d96f06d9][Minimal API]]s are no exception. There are two main ways to access services from the DI container:
- Inject services into an endpoint handler.
- Access the DI container directly in ~Program.cs~

The first method is much more common, and should be the approach you take in almost all cases.

#+NAME: Injecting the LinkGenerator
#+BEGIN_SRC csharp
app.MapGet("/links", (LinkGenerator links) =>
{
    string link = links.GetPathByName("products");
    return $"View the product at {link}";
});
#+END_SRC

The DI container will also create any dependencies that the [[id:769d0281-8138-47b5-9736-5892047b573b][LinkGenerator]] needs, based on what is in its constructor. It will either create a new instance of [[id:769d0281-8138-47b5-9736-5892047b573b][LinkGenerator]], or reuse an existing one, depending on its lifetime.

If a service is needed outside a request (for example, logging or updating a database schema when the application starts), use [[id:496ff34c-5052-41b5-85be-de05b1ae56cc][WebApplication]]'s ~WebApplication.Services()~ to get the service.

~WebApplication.Services()~ exposes [[id:c9c7f557-1120-4841-9eea-d1ee6beb1fc8][IServiceProvider]], which gives methods for getting the services from the DI container.

#+NAME: Getting services from the DI container using WebApplication.Services()
#+BEGIN_SRC csharp
WebApplicationBuilder builder = WebApplication.CreateBuilder(args);
WebApplication app = builder.Build();

app.MapGet("/", () => "Hello World!");

LinkGenerator links =
 app.Services.GetRequiredService<LinkGenerator>();

app.Run();
#+END_SRC

Asking the DI container for a service is an example of the [[id:2807e592-fd35-4551-bb15-fec7cd854666][Service Locator]] pattern. Here, [[id:2807e592-fd35-4551-bb15-fec7cd854666][Service Locator]] is considered an anti-pattern. Don't use it unless necessary!
