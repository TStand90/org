:PROPERTIES:
:ID:       26fcbf3c-dee7-40a8-92e3-2fa7079c97e4
:END:
#+title: HashMap
#+filetags: :Data_Structures:

Maps a key to a value.

| Operation | Time complexity |
|-----------+-----------------|
| Insert    | O(1)            |
| Remove    | O(1)            |
| Search    | O(1)            |

* Properties
** Cannot contain duplicates.

* Hashing
Hashing is the process of taking the key and converting it to an integer. This integer is the index that the value will be stored at in the underlying array.

* Collisions
Collisions occur when two keys are assigned the same index by the hashing function. Collisions are unavoidable, but there are strategies for handling them.

** Increase the size of the array.
The hash map keeps track of how "full" it is. This measurement is called the [[id:b427d8b9-b99e-4baa-aa90-27121682e8fb][load factor]]. [[id:b427d8b9-b99e-4baa-aa90-27121682e8fb][Load factor]] goes from 0 (empty) to 1 (full). So an array of size 10 with 6 entries has a [[id:b427d8b9-b99e-4baa-aa90-27121682e8fb][load factor]] of 0.6

When the array is roughly half full, double its size and reset the keys and values based on the new array (for example, if the hashing function uses [[id:21c2c73c-d3fc-498e-b5e6-08310e3b399d][modulo]], rerun the [[id:21c2c73c-d3fc-498e-b5e6-08310e3b399d][modulo]] division). This process is called [[id:d413dcf2-5bba-4b65-bf27-3a7b5f65bd91][rehashing]].
** Use a [[id:d0b02bbc-6d2e-4905-aba3-a3cbe3e97b20][Linked List]] in the array.
Collisions can still happen with a low [[id:b427d8b9-b99e-4baa-aa90-27121682e8fb][load factor]]. When a collision happens, you can store the values at the given index with a [[id:d0b02bbc-6d2e-4905-aba3-a3cbe3e97b20][Linked List]]. This has the downside of needing to traverse the [[id:d0b02bbc-6d2e-4905-aba3-a3cbe3e97b20][Linked List]] to find the value you are looking for when performing the ~get~ operation, but with a low number of collisions, this should still be fairly efficient.
** Open Addressing
*** +1 Method
If the index you are trying to insert at is occupied, try the next address. Keep adding 1 to the index until you hit an open position.

When searching for the key, you will need to follow the same +1 pattern to find the value.

When searching for a key that is not in the [[id:26fcbf3c-dee7-40a8-92e3-2fa7079c97e4][HashMap]], you will need to keep searching until you hit an empty slot in the array, at which point you can declare that the item is not in the [[id:26fcbf3c-dee7-40a8-92e3-2fa7079c97e4][HashMap]].

This is not a great way to handle open addressing, as you can get a large "cluster" of items together, resulting in a lot of collisions.

* Notes
** What gets stored
Note that the thing being stored in the array is *both the key _and_ value*, not just the value. This is to ensure that when the ~get~ operaton happens, we know we are getting the correct value back. For example, if we store as a [[id:d0b02bbc-6d2e-4905-aba3-a3cbe3e97b20][Linked List]] and have to traverse, we need the key to be stored so we know we're getting the correct value.
** The size of the array
The size of the underlying array tends to be a prime number. This tends to make the math for the hashing function work better.

* [[id:82f10055-fd84-4321-b761-0ce6dc8452c4][Leetcode]] Exercises
** [[id:582f5b5a-9718-44ee-a53f-fbd5e6ad5f5b][1. Two Sum]]
** [[id:bc466c07-bec0-4000-8097-9b42535779e1][217. Contains Duplicate]]
** [[id:e0184029-0c62-46b4-9e28-8666268df8fb][146. LRU Cache]]
** [[id:5a2d8c07-3504-4646-98fe-e0a9ef389759][705. Design HashSet]]
** [[id:1ade312b-fdfa-4d45-8616-8a5c923a5709][706. Design HashMap]]
